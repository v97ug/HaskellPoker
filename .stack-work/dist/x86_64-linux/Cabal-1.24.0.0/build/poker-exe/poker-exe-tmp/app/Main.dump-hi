
==================== FINAL INTERFACE ====================
2016-10-30 12:09:03.739855 UTC

interface main@main:Main 8001
  interface hash: 68754efbca6c462518a41c8faa2c4182
  ABI hash: 0f510e715e8730e9b4f7e19c5f611c1c
  export-list hash: fe736b2c77f0d55ed5fb1b39b317dfbf
  orphan hash: 3ac70c904a29db606c834b85629fa551
  flag hash: 1d5ae373ead6ea89e2b573c720a08da9
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.add0str
  Main.main
  Main.update
module dependencies: Cards Hands
package dependencies: GLFW-b-1.4.8.1@GLFW-b-1.4.8.1-2oLi8d8Om6j90ytPw2you1
                      GLURaw-2.0.0.2@GLURaw-2.0.0.2-CXqiFREEjzx2h5fh9cccgi
                      JuicyPixels-3.2.8@JuicyPixels-3.2.8-9xVAaSn1ptq1f1nvfTAuq3
                      JuicyPixels-util-0.2@JuicyPixels-util-0.2-DLVBsASb875DbzDt8LnQRe
                      ObjectName-1.1.0.1@ObjectName-1.1.0.1-HHHIolNI8Pm5H3OGkgSUrO
                      OpenGL-3.0.1.0@OpenGL-3.0.1.0-L3kgxMgk99dGXu7ugl8pfi
                      OpenGLRaw-3.2.3.0@OpenGLRaw-3.2.3.0-1lEp0meCLgF9BpuYJlcXHY
                      StateVar-1.1.0.4@StateVar-1.1.0.4-CJpWsiXJdd89SnV9dZtTwc
                      adjunctions-4.3@adjunctions-4.3-GCEjqNzETW59DSv4CMOptV
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      base-orphans-0.5.4@base-orphans-0.5.4-5IQvrjd7gNP548VkOOyIq6
                      bifunctors-5.4.1@bifunctors-5.4.1-2CMldPyzyp9LmjO5mJ1j8k
                      binary-0.8.3.0@binary-0.8.3.0-C4Tdq516dA2P2jpb0pxQ0
                      bindings-GLFW-3.1.2.2@bindings-GLFW-3.1.2.2-2GG6GK5a2OkK8NpUgT7p3p
                      boundingboxes-0.2.3@boundingboxes-0.2.3-B5Lpk0UgQX9FW4DN0qgVnk
                      bytes-0.15.2@bytes-0.15.2-HP6DsJicUjcLfydsuJ4jcG
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      cereal-0.5.3.0@cereal-0.5.3.0-JAeSmYgm4O6ETcVwWu1cR8
                      colors-0.3.0.2@colors-0.3.0.2-AvkeI2ZeqYcBVc35VrD0W6
                      comonad-5@comonad-5-1X5fCjgjqtUIqJcEv6Bntb
                      containers-0.5.7.1@containers-0.5.7.1-Ha3qpRxMQ6UJleQLCYcCoM
                      contravariant-1.4@contravariant-1.4-9srMvDZNIDHARyPiex7EnJ
                      control-bool-0.2.1@control-bool-0.2.1-Jyyb4EXrMDw8rIK211gyYF
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.2.6.2@directory-1.2.6.2
                      distributive-0.5.0.2@distributive-0.5.0.2-Cdz2vLOk85j1doGXLcictT
                      exceptions-0.8.3@exceptions-0.8.3-7py7fmRxowDFpHmiHGKrTb
                      filepath-1.4.1.0@filepath-1.4.1.0
                      fixed-0.2.1.1@fixed-0.2.1.1-21JkkJmr6h52cZo1o8cauA
                      free-4.12.4@free-4.12.4-BgJ9ci1u1y48vHU0OFcVsx
                      free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB
                      freetype2-0.1.1@freetype2-0.1.1-BNzVW0Qm4YZInBL0rkUB7d
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      half-0.2.2.3@half-0.2.2.3-BFHx0LiJemg6baNXrjGThF
                      hashable-1.2.4.0@hashable-1.2.4.0-AwGBZwH5NOu32fFT3k5XwG
                      integer-gmp-1.0.0.1
                      kan-extensions-5.0.1@kan-extensions-5.0.1-GsZ3y7l4oBZBdQifYSzpU9
                      lens-4.14@lens-4.14-IJHIu5ECNzmIvypqaucYG7
                      linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      poker-0.1.0.0@poker-0.1.0.0-6b4Qq4MUzmfCvWidKCYUPf
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-FAyB4iuuM7cHXdrLMZtdXq
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      profunctors-5.2@profunctors-5.2-8aCFgYqhmEQC00Ujrg8wb
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      reflection-2.1.2@reflection-2.1.2-J1ZzlxijzaHGRixYxgxlf9
                      scientific-0.3.4.9@scientific-0.3.4.9-6A89ogaqIZMGXcxRrTFA5h
                      semigroupoids-5.1@semigroupoids-5.1-Gg9LyNoAhKN7Lad6MtBCkX
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx
                      template-haskell-2.11.0.0
                      text-1.2.2.1@text-1.2.2.1-BbJ8XwxQPYLIiQbtPTWn3j
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-81lZyuOJOvsD0zyCv2TKld
                      unix-2.7.2.0@unix-2.7.2.0
                      unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-L1VZsahRbVJ1PITZedf9hg
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
                      zlib-0.6.1.1@zlib-0.6.1.1-4cYT5jyS3jw6zZyCUZMz3T
orphans: GLFW-b-1.4.8.1@GLFW-b-1.4.8.1-2oLi8d8Om6j90ytPw2you1:Graphics.UI.GLFW.Types
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0-C4Tdq516dA2P2jpb0pxQ0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         colors-0.3.0.2@colors-0.3.0.2-AvkeI2ZeqYcBVc35VrD0W6:Data.Color
         free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame
         free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame.Backend.GLFW
         free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame.Instances
         hashable-1.2.4.0@hashable-1.2.4.0-AwGBZwH5NOu32fFT3k5XwG:Data.Hashable.Generic
         linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6:Linear.Instances
         reflection-2.1.2@reflection-2.1.2-J1ZzlxijzaHGRixYxgxlf9:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-BbJ8XwxQPYLIiQbtPTWn3j:Data.Text
         text-1.2.2.1@text-1.2.2.1-BbJ8XwxQPYLIiQbtPTWn3j:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-BbJ8XwxQPYLIiQbtPTWn3j:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
family instance modules: GLFW-b-1.4.8.1@GLFW-b-1.4.8.1-2oLi8d8Om6j90ytPw2you1:Graphics.UI.GLFW.Types
                         JuicyPixels-3.2.8@JuicyPixels-3.2.8-9xVAaSn1ptq1f1nvfTAuq3:Codec.Picture.Tga
                         JuicyPixels-3.2.8@JuicyPixels-3.2.8-9xVAaSn1ptq1f1nvfTAuq3:Codec.Picture.Tiff
                         JuicyPixels-3.2.8@JuicyPixels-3.2.8-9xVAaSn1ptq1f1nvfTAuq3:Codec.Picture.Types
                         adjunctions-4.3@adjunctions-4.3-GCEjqNzETW59DSv4CMOptV:Data.Functor.Rep
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Compose
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.Functor.Product base-4.9.0.0:Data.Functor.Sum
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         bifunctors-5.4.1@bifunctors-5.4.1-2CMldPyzyp9LmjO5mJ1j8k:Data.Bifunctor.Biff
                         bifunctors-5.4.1@bifunctors-5.4.1-2CMldPyzyp9LmjO5mJ1j8k:Data.Bifunctor.Clown
                         bifunctors-5.4.1@bifunctors-5.4.1-2CMldPyzyp9LmjO5mJ1j8k:Data.Bifunctor.Flip
                         bifunctors-5.4.1@bifunctors-5.4.1-2CMldPyzyp9LmjO5mJ1j8k:Data.Bifunctor.Join
                         bifunctors-5.4.1@bifunctors-5.4.1-2CMldPyzyp9LmjO5mJ1j8k:Data.Bifunctor.Joker
                         bifunctors-5.4.1@bifunctors-5.4.1-2CMldPyzyp9LmjO5mJ1j8k:Data.Bifunctor.Product
                         bifunctors-5.4.1@bifunctors-5.4.1-2CMldPyzyp9LmjO5mJ1j8k:Data.Bifunctor.Sum
                         bifunctors-5.4.1@bifunctors-5.4.1-2CMldPyzyp9LmjO5mJ1j8k:Data.Bifunctor.Tannen
                         bifunctors-5.4.1@bifunctors-5.4.1-2CMldPyzyp9LmjO5mJ1j8k:Data.Bifunctor.Wrapped
                         bytes-0.15.2@bytes-0.15.2-HP6DsJicUjcLfydsuJ4jcG:Data.Bytes.Get
                         bytes-0.15.2@bytes-0.15.2-HP6DsJicUjcLfydsuJ4jcG:Data.Bytes.Signed
                         bytes-0.15.2@bytes-0.15.2-HP6DsJicUjcLfydsuJ4jcG:Data.Bytes.VarInt
                         containers-0.5.7.1@containers-0.5.7.1-Ha3qpRxMQ6UJleQLCYcCoM:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1-Ha3qpRxMQ6UJleQLCYcCoM:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1-Ha3qpRxMQ6UJleQLCYcCoM:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1-Ha3qpRxMQ6UJleQLCYcCoM:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1-Ha3qpRxMQ6UJleQLCYcCoM:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         kan-extensions-5.0.1@kan-extensions-5.0.1-GsZ3y7l4oBZBdQifYSzpU9:Data.Functor.Day
                         kan-extensions-5.0.1@kan-extensions-5.0.1-GsZ3y7l4oBZBdQifYSzpU9:Data.Functor.Yoneda
                         lens-4.14@lens-4.14-IJHIu5ECNzmIvypqaucYG7:Control.Lens.At
                         lens-4.14@lens-4.14-IJHIu5ECNzmIvypqaucYG7:Control.Lens.Internal.Indexed
                         lens-4.14@lens-4.14-IJHIu5ECNzmIvypqaucYG7:Control.Lens.Reified
                         lens-4.14@lens-4.14-IJHIu5ECNzmIvypqaucYG7:Control.Lens.Tuple
                         lens-4.14@lens-4.14-IJHIu5ECNzmIvypqaucYG7:Control.Lens.Wrapped
                         lens-4.14@lens-4.14-IJHIu5ECNzmIvypqaucYG7:Control.Lens.Zoom
                         linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6:Linear.Plucker
                         linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6:Linear.Quaternion
                         linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6:Linear.V
                         linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6:Linear.V0
                         linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6:Linear.V1
                         linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6:Linear.V2
                         linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6:Linear.V3
                         linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6:Linear.V4
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         profunctors-5.2@profunctors-5.2-8aCFgYqhmEQC00Ujrg8wb:Data.Profunctor.Rep
                         tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx:Data.Tagged
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-BbJ8XwxQPYLIiQbtPTWn3j:Data.Text
                         text-1.2.2.1@text-1.2.2.1-BbJ8XwxQPYLIiQbtPTWn3j:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-L1VZsahRbVJ1PITZedf9hg:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-L1VZsahRbVJ1PITZedf9hg:Data.HashSet
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed.Base
                         zlib-0.6.1.1@zlib-0.6.1.1-4cYT5jyS3jw6zZyCUZMz3T:Codec.Compression.Zlib.Stream
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Traversable 7ce5b7ee67475ac3d03ae825b86efd9f
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  boundingboxes-0.2.3@boundingboxes-0.2.3-B5Lpk0UgQX9FW4DN0qgVnk:Data.BoundingBox eb7472d85f9034918394f129e5953c2f
import  -/  colors-0.3.0.2@colors-0.3.0.2-AvkeI2ZeqYcBVc35VrD0W6:Data.Color.Names 34e06a389cdd70f858857a0b44655072
import  -/  containers-0.5.7.1@containers-0.5.7.1-Ha3qpRxMQ6UJleQLCYcCoM:Data.Map 0d58213e348c347f293320a2da4174e1
import  -/  containers-0.5.7.1@containers-0.5.7.1-Ha3qpRxMQ6UJleQLCYcCoM:Data.Map.Base aa779da3873adb5152d8331e38c5c17f
import  -/  free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame 422a6c8886d90efb38586a0d8b0a56b6
import  -/  free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame.Class 9c829726437c22e4ce2471a3ef9e481d
import  -/  free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame.Data.Bitmap 2133b386e6455619bb70c33c956013aa
import  -/  free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame.Data.Font 67b54171ade9c7f96245d64ea5f4fa40
import  -/  free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame.Text c74675a5640de26f89c6991f644713cd
import  -/  free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame.Types 99a4ef4c051776899396f2308d46e80b
import  -/  free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame.UI 0a12b16f77bebac1e6f0f6ec43ed3b91
import  -/  free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame.Util 1408c732a27dde77904b99db88c46ac0
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6:Linear.V2 e33ad0d2afac462e321b5adc0d9c5ea3
import  -/  Cards 3f7aa1f66656703e987cdd6bd0fbd461
  exports: d1519e401fbcc677cf0d5c58870d86ed
  Card 0c68e2144bde33f5725c7745e2ae21ec
  Clover 685a3de32d86f19ed78a7e7547ac9269
  allCards 975a80e28297b5cd28831929f825f777
  showPictCards 02f5313a7f96470830ec6f5171d8d928
  shuffleCard 0c20863990abf2255b310ef254b77b8f
  tupleCards 2480c26874e19ce7d01cb1088d64ec53
import  -/  Hands cd7563afb27d6b24f8ddc7c449f05715
  exports: 63321d20311ea0ecbb141c4c4193f529
  pokerHand 19c8692a2fbdfff1d80560ff19e6da2f
  toHand e4833d5e78da867e177675099c243f67
import  -/  poker-0.1.0.0@poker-0.1.0.0-6b4Qq4MUzmfCvWidKCYUPf:Lib 0593fcc5996622f5c520a495651e5517
import  -/  random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe:System.Random 12e582ce6a18ca02c107789bb28c509c
e17f1c361493e2575f04b1bb4ae43d0f
  $s$fAffineF ::
    FreeGame.Class.Affine (Control.Monad.Free.Church.F FreeGame.UI.UI)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                  Main.$s$fAffineF_$s$fAffineF_$cp1Affine
                  Main.$s$fAffineF_$s$fAffineF_$crotateR
                  Main.$s$fAffineF_$s$fAffineF_$crotateD
                  Main.$s$fAffineF_$s$fAffineF_$cscale
                  Main.$s$fAffineF_$s$fAffineF_$ctranslate -}
f534fdb8e346268b31598dbd52c2575b
  $s$fAffineF_$s$fAffineF_$cp1Affine ::
    GHC.Base.Functor (Control.Monad.Free.Church.F FreeGame.UI.UI)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Control.Monad.Free.Church.$fFunctorF @ FreeGame.UI.UI) -}
b103d5034053851a250cca07ff9d87f0
  $s$fAffineF_$s$fAffineF_$crotateD ::
    GHC.Types.Double
    -> Control.Monad.Free.Church.F FreeGame.UI.UI a
    -> Control.Monad.Free.Church.F FreeGame.UI.UI a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S)),1*C1(C1(U))><L,U><L,C(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   (a5 :: GHC.Types.Double)
                   (eta1 :: Control.Monad.Free.Church.F FreeGame.UI.UI a)
                   @ r
                   (eta2 :: a -> r)
                   (eta3 :: FreeGame.UI.UI r -> r) ->
                 (Control.Monad.Free.Church.hoistF
                    @ FreeGame.UI.UI
                    @ FreeGame.UI.UI
                    @ a
                    (\ @ x -> FreeGame.UI.$fAffineUI_$crotateD @ x a5)
                    eta1)
                   `cast`
                 (Control.Monad.Free.Church.N:F[0] <FreeGame.UI.UI>_R <a>_R)
                   @ r
                   eta2
                   eta3)
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Types.Double>_R
                 ->_R <Control.Monad.Free.Church.F FreeGame.UI.UI a>_R
                 ->_R Sym (Control.Monad.Free.Church.N:F[0]
                               <FreeGame.UI.UI>_R <a>_R)) -}
a23cc710a95c51eef1595d9e8593d082
  $s$fAffineF_$s$fAffineF_$crotateR ::
    GHC.Types.Double
    -> Control.Monad.Free.Church.F FreeGame.UI.UI a
    -> Control.Monad.Free.Church.F FreeGame.UI.UI a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S)),1*C1(C1(U))><L,U><L,C(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   (a5 :: GHC.Types.Double)
                   (eta1 :: Control.Monad.Free.Church.F FreeGame.UI.UI a)
                   @ r
                   (eta2 :: a -> r)
                   (eta3 :: FreeGame.UI.UI r -> r) ->
                 (Control.Monad.Free.Church.hoistF
                    @ FreeGame.UI.UI
                    @ FreeGame.UI.UI
                    @ a
                    (\ @ x -> FreeGame.UI.$fAffineUI_$crotateR @ x a5)
                    eta1)
                   `cast`
                 (Control.Monad.Free.Church.N:F[0] <FreeGame.UI.UI>_R <a>_R)
                   @ r
                   eta2
                   eta3)
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Types.Double>_R
                 ->_R <Control.Monad.Free.Church.F FreeGame.UI.UI a>_R
                 ->_R Sym (Control.Monad.Free.Church.N:F[0]
                               <FreeGame.UI.UI>_R <a>_R)) -}
ae3556f45a8f0a5150a794d2ff50f4b8
  $s$fAffineF_$s$fAffineF_$cscale ::
    FreeGame.Types.Vec2
    -> Control.Monad.Free.Church.F FreeGame.UI.UI a
    -> Control.Monad.Free.Church.F FreeGame.UI.UI a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S)),1*C1(C1(U))><L,U><L,C(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   (a5 :: FreeGame.Types.Vec2)
                   (eta1 :: Control.Monad.Free.Church.F FreeGame.UI.UI a)
                   @ r
                   (eta2 :: a -> r)
                   (eta3 :: FreeGame.UI.UI r -> r) ->
                 (Control.Monad.Free.Church.hoistF
                    @ FreeGame.UI.UI
                    @ FreeGame.UI.UI
                    @ a
                    (\ @ x -> FreeGame.UI.$fAffineUI_$cscale @ x a5)
                    eta1)
                   `cast`
                 (Control.Monad.Free.Church.N:F[0] <FreeGame.UI.UI>_R <a>_R)
                   @ r
                   eta2
                   eta3)
                  `cast`
                (forall (a :: <*>_N).
                 <FreeGame.Types.Vec2>_R
                 ->_R <Control.Monad.Free.Church.F FreeGame.UI.UI a>_R
                 ->_R Sym (Control.Monad.Free.Church.N:F[0]
                               <FreeGame.UI.UI>_R <a>_R)) -}
1c44d9672196a6209fa612d499c31b19
  $s$fAffineF_$s$fAffineF_$ctranslate ::
    FreeGame.Types.Vec2
    -> Control.Monad.Free.Church.F FreeGame.UI.UI a
    -> Control.Monad.Free.Church.F FreeGame.UI.UI a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S)),1*C1(C1(U))><L,U><L,C(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   (a5 :: FreeGame.Types.Vec2)
                   (eta1 :: Control.Monad.Free.Church.F FreeGame.UI.UI a)
                   @ r
                   (eta2 :: a -> r)
                   (eta3 :: FreeGame.UI.UI r -> r) ->
                 (Control.Monad.Free.Church.hoistF
                    @ FreeGame.UI.UI
                    @ FreeGame.UI.UI
                    @ a
                    (\ @ x -> FreeGame.UI.$fAffineUI_$ctranslate @ x a5)
                    eta1)
                   `cast`
                 (Control.Monad.Free.Church.N:F[0] <FreeGame.UI.UI>_R <a>_R)
                   @ r
                   eta2
                   eta3)
                  `cast`
                (forall (a :: <*>_N).
                 <FreeGame.Types.Vec2>_R
                 ->_R <Control.Monad.Free.Church.F FreeGame.UI.UI a>_R
                 ->_R Sym (Control.Monad.Free.Church.N:F[0]
                               <FreeGame.UI.UI>_R <a>_R)) -}
3784105b66ffaf62e8a923c75a7d475f
  $s$fAffineIterT ::
    FreeGame.Class.Affine
      (Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Iter.IterT
                       (Control.Monad.Free.Church.F FreeGame.UI.UI))
                  Main.$s$fAffineIterT_$s$fAffineIterT_$cp1Affine
                  Main.$s$fAffineIterT_$s$fAffineIterT_$crotateR
                  Main.$s$fAffineIterT_$s$fAffineIterT_$crotateD
                  Main.$s$fAffineIterT_$s$fAffineIterT_$cscale
                  Main.$s$fAffineIterT_$s$fAffineIterT_$ctranslate -}
99760e2c91ca0ce71602cc7c223c5fd3
  $s$fAffineIterT_$s$fAffineIterT_$cp1Affine ::
    GHC.Base.Functor
      (Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fAffineIterT_$s$fFunctorIterT -}
75eefbc500fef008cde587a40922cf89
  $s$fAffineIterT_$s$fAffineIterT_$crotateD ::
    GHC.Types.Double
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) a
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) a
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   (a5 :: GHC.Types.Double)
                   (eta1 :: Control.Monad.Trans.Iter.IterT
                              (Control.Monad.Free.Church.F FreeGame.UI.UI) a) ->
                 Control.Monad.Trans.Iter.hoistIterT
                   @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                   @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                   @ a
                   (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI)
                   (\ @ a6 -> Main.$s$fAffineF_$s$fAffineF_$crotateD @ a6 a5)
                   eta1) -}
c1f9062143b5dce6a1e966f02b2b9d62
  $s$fAffineIterT_$s$fAffineIterT_$crotateR ::
    GHC.Types.Double
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) a
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) a
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   (a5 :: GHC.Types.Double)
                   (eta1 :: Control.Monad.Trans.Iter.IterT
                              (Control.Monad.Free.Church.F FreeGame.UI.UI) a) ->
                 Control.Monad.Trans.Iter.hoistIterT
                   @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                   @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                   @ a
                   (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI)
                   (\ @ a6 -> Main.$s$fAffineF_$s$fAffineF_$crotateR @ a6 a5)
                   eta1) -}
b8653b90e882e3741233bf812ec70ed4
  $s$fAffineIterT_$s$fAffineIterT_$cscale ::
    FreeGame.Types.Vec2
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) a
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) a
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   (a5 :: FreeGame.Types.Vec2)
                   (eta1 :: Control.Monad.Trans.Iter.IterT
                              (Control.Monad.Free.Church.F FreeGame.UI.UI) a) ->
                 Control.Monad.Trans.Iter.hoistIterT
                   @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                   @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                   @ a
                   (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI)
                   (\ @ a6 -> Main.$s$fAffineF_$s$fAffineF_$cscale @ a6 a5)
                   eta1) -}
f633c37bec1980f08430f25c817a11d1
  $s$fAffineIterT_$s$fAffineIterT_$ctranslate ::
    FreeGame.Types.Vec2
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) a
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) a
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   (a5 :: FreeGame.Types.Vec2)
                   (eta1 :: Control.Monad.Trans.Iter.IterT
                              (Control.Monad.Free.Church.F FreeGame.UI.UI) a) ->
                 Control.Monad.Trans.Iter.hoistIterT
                   @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                   @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                   @ a
                   (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI)
                   (\ @ a6 -> Main.$s$fAffineF_$s$fAffineF_$ctranslate @ a6 a5)
                   eta1) -}
e8f451982e56811e346b62454b3d908a
  $s$fAffineIterT_$s$fFunctorIterT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Iter.IterT
                       (Control.Monad.Free.Church.F FreeGame.UI.UI))
                  (Control.Monad.Trans.Iter.$fAlternativeIterT_$cfmap
                     @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                     (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI))
                  Main.$s$fAffineIterT_$s$fFunctorIterT_$c<$ -}
b8259b63faab7d6c61cc1d20ad43ae3b
  $s$fAffineIterT_$s$fFunctorIterT_$c<$ ::
    a
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) b
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) a
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (eta1 :: a)
                   (eta2 :: Control.Monad.Trans.Iter.IterT
                              (Control.Monad.Free.Church.F FreeGame.UI.UI) b) ->
                 Control.Monad.Trans.Iter.$fAlternativeIterT_$cfmap
                   @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                   (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI)
                   @ b
                   @ a
                   (\ (ds :: b) -> eta1)
                   eta2) -}
88f90124b1b09a50edd27695fa769376
  $s$fAlternativeIterT_$c>>= ::
    Control.Monad.Trans.Iter.IterT
      (Control.Monad.Free.Church.F FreeGame.UI.UI) a
    -> (a
        -> Control.Monad.Trans.Iter.IterT
             (Control.Monad.Free.Church.F FreeGame.UI.UI) b)
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,C(C1(C1(U)))><L,U><L,U>,
     Inline: [NEVER] -}
66197c9b2263e87aaac0e0efbf51d2aa
  $s$fMonadFreeIdentityIterT ::
    Control.Monad.Free.Class.MonadFree
      Data.Functor.Identity.Identity
      (Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Functor.Identity.Identity
                  @ (Control.Monad.Trans.Iter.IterT
                       (Control.Monad.Free.Church.F FreeGame.UI.UI))
                  (Control.Monad.Trans.Iter.$fMonadFreeIdentityIterT_$cp1MonadFree
                     @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                     (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI))
                  (\ @ a
                     (eta1 :: Data.Functor.Identity.Identity
                                (Control.Monad.Trans.Iter.IterT
                                   (Control.Monad.Free.Church.F FreeGame.UI.UI) a))
                     @ r
                     (eta2 :: Data.Either.Either
                                a
                                (Control.Monad.Trans.Iter.IterT
                                   (Control.Monad.Free.Church.F FreeGame.UI.UI) a)
                              -> r)
                     (eta3 :: FreeGame.UI.UI r -> r) ->
                   (Control.Monad.Free.Church.$fApplicativeF_$cpure
                      @ FreeGame.UI.UI
                      @ (Data.Either.Either
                           a
                           (Control.Monad.Trans.Iter.IterT
                              (Control.Monad.Free.Church.F FreeGame.UI.UI) a))
                      (Data.Either.Right
                         @ a
                         @ (Control.Monad.Trans.Iter.IterT
                              (Control.Monad.Free.Church.F FreeGame.UI.UI) a)
                         (Data.Functor.Identity.runIdentity
                            @ (Control.Monad.Trans.Iter.IterT
                                 (Control.Monad.Free.Church.F FreeGame.UI.UI) a)
                            eta1)))
                     `cast`
                   (Control.Monad.Free.Church.N:F[0]
                        <FreeGame.UI.UI>_R
                        <Data.Either.Either
                           a
                           (Control.Monad.Trans.Iter.IterT
                              (Control.Monad.Free.Church.F FreeGame.UI.UI) a)>_R)
                     @ r
                     eta2
                     eta3)
                    `cast`
                  (forall (a :: <*>_N).
                   <Data.Functor.Identity.Identity
                      (Control.Monad.Trans.Iter.IterT
                         (Control.Monad.Free.Church.F FreeGame.UI.UI) a)>_R
                   ->_R Trans
                            (Sym (Control.Monad.Free.Church.N:F[0]
                                      <FreeGame.UI.UI>_R
                                      <Data.Either.Either
                                         a
                                         (Control.Monad.Trans.Iter.IterT
                                            (Control.Monad.Free.Church.F FreeGame.UI.UI) a)>_R))
                            (Sym (Control.Monad.Trans.Iter.N:IterT[0]
                                      <Control.Monad.Free.Church.F FreeGame.UI.UI>_N <a>_N))) -}
4776faea7f4f238842810e79c4d95f24
  $s$fMonadFreefF ::
    Control.Monad.Free.Class.MonadFree
      FreeGame.UI.UI (Control.Monad.Free.Church.F FreeGame.UI.UI)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ FreeGame.UI.UI
                  @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                  Main.$s$fMonadFreefF_$s$fMonadFreefF_$cp1MonadFree
                  (Control.Monad.Free.Church.$fMonadFreefF_$cwrap
                     @ FreeGame.UI.UI
                     FreeGame.UI.$fFunctorUI) -}
d8593b4026ed6bce5e96316c7ea4ff13
  $s$fMonadFreefF_$s$fMonadFreefF_$cp1MonadFree ::
    GHC.Base.Monad (Control.Monad.Free.Church.F FreeGame.UI.UI)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI) -}
9f8be0c298f9ce865a1491d8d30a2da2
  $s$fMonadIOIterT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Iter.IterT
                       (Control.Monad.Free.Church.F FreeGame.UI.UI))
                  Main.$s$fMonadIOIterT1
                  (Control.Monad.Trans.Iter.$fMonadIOIterT_$cliftIO
                     @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                     FreeGame.$fMonadIOF) -}
953d38aeb9bc75132f6a8fa99cc21959
  $s$fMonadIOIterT1 ::
    GHC.Base.Monad (Control.Monad.Trans.Iter.IterT FreeGame.UI.Frame)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadIOIterT_$s$fMonadIterT -}
538e5d159c327cb7bdf3564ac2b49c88
  $s$fMonadIOIterT_$s$fMonadIterT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Iter.IterT
                       (Control.Monad.Free.Church.F FreeGame.UI.UI))
                  (Control.Monad.Trans.Iter.$fMonadIterT_$cp1Monad
                     @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                     (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI))
                  Main.$s$fAlternativeIterT_$c>>=
                  Main.$s$fMonadIOIterT_$s$fMonadIterT_$c>>
                  (\ @ a
                     (eta1 :: a)
                     @ r
                     (eta2 :: Data.Either.Either
                                a
                                (Control.Monad.Trans.Iter.IterT
                                   (Control.Monad.Free.Church.F FreeGame.UI.UI) a)
                              -> r)
                     (eta3 :: FreeGame.UI.UI r -> r) ->
                   (Control.Monad.Free.Church.$fApplicativeF_$cpure
                      @ FreeGame.UI.UI
                      @ (Data.Either.Either
                           a
                           (Control.Monad.Trans.Iter.IterT
                              (Control.Monad.Free.Church.F FreeGame.UI.UI) a))
                      (Data.Either.Left
                         @ a
                         @ (Control.Monad.Trans.Iter.IterT
                              (Control.Monad.Free.Church.F FreeGame.UI.UI) a)
                         eta1))
                     `cast`
                   (Control.Monad.Free.Church.N:F[0]
                        <FreeGame.UI.UI>_R
                        <Data.Either.Either
                           a
                           (Control.Monad.Trans.Iter.IterT
                              (Control.Monad.Free.Church.F FreeGame.UI.UI) a)>_R)
                     @ r
                     eta2
                     eta3)
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Trans
                            (Sym (Control.Monad.Free.Church.N:F[0]
                                      <FreeGame.UI.UI>_R
                                      <Data.Either.Either
                                         a
                                         (Control.Monad.Trans.Iter.IterT
                                            (Control.Monad.Free.Church.F FreeGame.UI.UI) a)>_R))
                            (Sym (Control.Monad.Trans.Iter.N:IterT[0]
                                      <Control.Monad.Free.Church.F FreeGame.UI.UI>_N <a>_N)))
                  Main.$s$fMonadIOIterT_$s$fMonadIterT_$cfail -}
72f5d1b7fae2f9dd7224479e30f1c087
  $s$fMonadIOIterT_$s$fMonadIterT_$c>> ::
    Control.Monad.Trans.Iter.IterT
      (Control.Monad.Free.Church.F FreeGame.UI.UI) a
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) b
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,C(C1(U))><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Iter.IterT
                            (Control.Monad.Free.Church.F FreeGame.UI.UI) a)
                   (k1 :: Control.Monad.Trans.Iter.IterT
                            (Control.Monad.Free.Church.F FreeGame.UI.UI) b)
                   @ r
                   (eta1 :: Data.Either.Either
                              b
                              (Control.Monad.Trans.Iter.IterT
                                 (Control.Monad.Free.Church.F FreeGame.UI.UI) b)
                            -> r)
                   (eta2 :: FreeGame.UI.UI r -> r) ->
                 (Main.$s$fAlternativeIterT_$c>>= @ a @ b m1 (\ (ds :: a) -> k1))
                   `cast`
                 (Trans
                      (Control.Monad.Trans.Iter.N:IterT[0]
                           <Control.Monad.Free.Church.F FreeGame.UI.UI>_N <b>_N)
                      (Control.Monad.Free.Church.N:F[0]
                           <FreeGame.UI.UI>_R
                           <Data.Either.Either
                              b
                              (Control.Monad.Trans.Iter.IterT
                                 (Control.Monad.Free.Church.F FreeGame.UI.UI) b)>_R))
                   @ r
                   eta1
                   eta2)
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Iter.IterT
                    (Control.Monad.Free.Church.F FreeGame.UI.UI) a>_R
                 ->_R <Control.Monad.Trans.Iter.IterT
                         (Control.Monad.Free.Church.F FreeGame.UI.UI) b>_R
                 ->_R Trans
                          (Sym (Control.Monad.Free.Church.N:F[0]
                                    <FreeGame.UI.UI>_R
                                    <Data.Either.Either
                                       b
                                       (Control.Monad.Trans.Iter.IterT
                                          (Control.Monad.Free.Church.F FreeGame.UI.UI) b)>_R))
                          (Sym (Control.Monad.Trans.Iter.N:IterT[0]
                                    <Control.Monad.Free.Church.F FreeGame.UI.UI>_N <b>_N))) -}
5cdc533dd303c3cc0617ec1b9ff5609c
  $s$fMonadIOIterT_$s$fMonadIterT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) a
  {- Arity: 1, Strictness: <L,A>, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (ds :: GHC.Base.String) ->
                 Control.Monad.Trans.Iter.never
                   @ Data.Functor.Identity.Identity
                   @ (Control.Monad.Trans.Iter.IterT
                        (Control.Monad.Free.Church.F FreeGame.UI.UI))
                   @ a
                   Data.Functor.Identity.$fMonadIdentity
                   Main.$s$fMonadFreeIdentityIterT) -}
49ce685096f487288198ef8a74013c7b
  $s$fPicture2DF ::
    FreeGame.Class.Picture2D
      (Control.Monad.Free.Church.F FreeGame.UI.UI)
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                  Main.$s$fPicture2DF_$s$fPicture2DF_$cp1Picture2D
                  Main.$s$fPicture2DF_$s$fPicture2DF_$cbitmap
                  Main.$s$fPicture2DF_$s$fPicture2DF_$cbitmapOnce
                  (FreeGame.Instances.$fPicture2DF_$cline
                     @ FreeGame.UI.UI
                     FreeGame.UI.$fPicture2DUI
                     FreeGame.UI.$fFunctorUI)
                  (FreeGame.Instances.$fPicture2DF_$cpolygon
                     @ FreeGame.UI.UI
                     FreeGame.UI.$fPicture2DUI
                     FreeGame.UI.$fFunctorUI)
                  (FreeGame.Instances.$fPicture2DF_$cpolygonOutline
                     @ FreeGame.UI.UI
                     FreeGame.UI.$fPicture2DUI
                     FreeGame.UI.$fFunctorUI)
                  (FreeGame.Instances.$fPicture2DF_$ccircle
                     @ FreeGame.UI.UI
                     FreeGame.UI.$fPicture2DUI
                     FreeGame.UI.$fFunctorUI)
                  (FreeGame.Instances.$fPicture2DF_$ccircleOutline
                     @ FreeGame.UI.UI
                     FreeGame.UI.$fPicture2DUI
                     FreeGame.UI.$fFunctorUI)
                  (FreeGame.Instances.$fPicture2DF_$cthickness
                     @ FreeGame.UI.UI
                     FreeGame.UI.$fPicture2DUI
                     FreeGame.UI.$fFunctorUI)
                  Main.$s$fPicture2DF_$s$fPicture2DF_$ccolor
                  Main.$s$fPicture2DF_$s$fPicture2DF_$cblendMode -}
4a4156e100c8ac720a9fb8dd64d2f0bc
  $s$fPicture2DF_$s$fPicture2DF_$cbitmap ::
    FreeGame.Data.Bitmap.Bitmap
    -> Control.Monad.Free.Church.F FreeGame.UI.UI ()
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><C(S),U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (b :: FreeGame.Data.Bitmap.Bitmap) ->
                 Control.Monad.Free.Class.liftF
                   @ FreeGame.UI.UI
                   @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                   @ ()
                   FreeGame.UI.$fFunctorUI
                   Main.$s$fMonadFreefF
                   (FreeGame.UI.$fPicture2DUI_$cbitmap b)) -}
4555961c8c62c1e751d4504f449094a2
  $s$fPicture2DF_$s$fPicture2DF_$cbitmapOnce ::
    FreeGame.Data.Bitmap.Bitmap
    -> Control.Monad.Free.Church.F FreeGame.UI.UI ()
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><C(S),U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (b :: FreeGame.Data.Bitmap.Bitmap) ->
                 Control.Monad.Free.Class.liftF
                   @ FreeGame.UI.UI
                   @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                   @ ()
                   FreeGame.UI.$fFunctorUI
                   Main.$s$fMonadFreefF
                   (FreeGame.UI.$fPicture2DUI_$cbitmapOnce b)) -}
be05e8da7b1bce719f596b604669a726
  $s$fPicture2DF_$s$fPicture2DF_$cblendMode ::
    FreeGame.Types.BlendMode
    -> Control.Monad.Free.Church.F FreeGame.UI.UI a
    -> Control.Monad.Free.Church.F FreeGame.UI.UI a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S)),1*C1(C1(U))><L,U><L,C(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   (m1 :: FreeGame.Types.BlendMode)
                   (eta1 :: Control.Monad.Free.Church.F FreeGame.UI.UI a)
                   @ r
                   (eta2 :: a -> r)
                   (eta3 :: FreeGame.UI.UI r -> r) ->
                 (Control.Monad.Free.Church.hoistF
                    @ FreeGame.UI.UI
                    @ FreeGame.UI.UI
                    @ a
                    (\ @ x -> FreeGame.UI.$fPicture2DUI_$cblendMode @ x m1)
                    eta1)
                   `cast`
                 (Control.Monad.Free.Church.N:F[0] <FreeGame.UI.UI>_R <a>_R)
                   @ r
                   eta2
                   eta3)
                  `cast`
                (forall (a :: <*>_N).
                 <FreeGame.Types.BlendMode>_R
                 ->_R <Control.Monad.Free.Church.F FreeGame.UI.UI a>_R
                 ->_R Sym (Control.Monad.Free.Church.N:F[0]
                               <FreeGame.UI.UI>_R <a>_R)) -}
7819c783a4652422d68231a9a2235f41
  $s$fPicture2DF_$s$fPicture2DF_$ccolor ::
    Data.Color.Color GHC.Types.Float
    -> Control.Monad.Free.Church.F FreeGame.UI.UI a
    -> Control.Monad.Free.Church.F FreeGame.UI.UI a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S)),1*C1(C1(U))><L,U><L,C(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   (k1 :: Data.Color.Color GHC.Types.Float)
                   (eta1 :: Control.Monad.Free.Church.F FreeGame.UI.UI a)
                   @ r
                   (eta2 :: a -> r)
                   (eta3 :: FreeGame.UI.UI r -> r) ->
                 (Control.Monad.Free.Church.hoistF
                    @ FreeGame.UI.UI
                    @ FreeGame.UI.UI
                    @ a
                    (\ @ x -> FreeGame.UI.$fPicture2DUI_$ccolor @ x k1)
                    eta1)
                   `cast`
                 (Control.Monad.Free.Church.N:F[0] <FreeGame.UI.UI>_R <a>_R)
                   @ r
                   eta2
                   eta3)
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Color.Color GHC.Types.Float>_R
                 ->_R <Control.Monad.Free.Church.F FreeGame.UI.UI a>_R
                 ->_R Sym (Control.Monad.Free.Church.N:F[0]
                               <FreeGame.UI.UI>_R <a>_R)) -}
626570b6a59b4332456065448346c606
  $s$fPicture2DF_$s$fPicture2DF_$cp1Picture2D ::
    FreeGame.Class.Affine (Control.Monad.Free.Church.F FreeGame.UI.UI)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fAffineF -}
295b7005be540e37be651262b994eae7
  $s$fPicture2DIterT ::
    FreeGame.Class.Picture2D
      (Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI))
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Iter.IterT
                       (Control.Monad.Free.Church.F FreeGame.UI.UI))
                  Main.$s$fPicture2DIterT_$s$fPicture2DIterT_$cp1Picture2D
                  (FreeGame.Instances.$fPicture2DIterT_$cbitmap
                     @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                     Main.$s$fPicture2DIterT1
                     (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI))
                  (FreeGame.Instances.$fPicture2DIterT_$cbitmapOnce
                     @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                     Main.$s$fPicture2DIterT1
                     (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI))
                  (FreeGame.Instances.$fPicture2DIterT_$cline
                     @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                     Main.$s$fPicture2DIterT1
                     (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI))
                  (FreeGame.Instances.$fPicture2DIterT_$cpolygon
                     @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                     Main.$s$fPicture2DIterT1
                     (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI))
                  (FreeGame.Instances.$fPicture2DIterT_$cpolygonOutline
                     @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                     Main.$s$fPicture2DIterT1
                     (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI))
                  (FreeGame.Instances.$fPicture2DIterT_$ccircle
                     @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                     Main.$s$fPicture2DIterT1
                     (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI))
                  (FreeGame.Instances.$fPicture2DIterT_$ccircleOutline
                     @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                     Main.$s$fPicture2DIterT1
                     (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI))
                  (FreeGame.Instances.$fPicture2DIterT_$cthickness
                     @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                     Main.$s$fPicture2DIterT1
                     (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI))
                  Main.$s$fPicture2DIterT_$s$fPicture2DIterT_$ccolor
                  Main.$s$fPicture2DIterT_$s$fPicture2DIterT_$cblendMode -}
6990c28485f337838eec48f538555659
  $s$fPicture2DIterT1 ::
    FreeGame.Class.Picture2D
      (Control.Monad.Free.Church.F FreeGame.UI.UI)
  {- Unfolding: InlineRule (0, True, True) Main.$s$fPicture2DF -}
829fd11e293e11a3246a5f366bbedf57
  $s$fPicture2DIterT_$s$fPicture2DIterT_$cblendMode ::
    FreeGame.Types.BlendMode
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) a
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) a
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   (m1 :: FreeGame.Types.BlendMode)
                   (eta1 :: Control.Monad.Trans.Iter.IterT
                              (Control.Monad.Free.Church.F FreeGame.UI.UI) a) ->
                 Control.Monad.Trans.Iter.hoistIterT
                   @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                   @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                   @ a
                   (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI)
                   (\ @ a5 -> Main.$s$fPicture2DF_$s$fPicture2DF_$cblendMode @ a5 m1)
                   eta1) -}
133e0de1aff080bf303cac775240d7dc
  $s$fPicture2DIterT_$s$fPicture2DIterT_$ccolor ::
    Data.Color.Color GHC.Types.Float
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) a
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) a
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   (k1 :: Data.Color.Color GHC.Types.Float)
                   (eta1 :: Control.Monad.Trans.Iter.IterT
                              (Control.Monad.Free.Church.F FreeGame.UI.UI) a) ->
                 Control.Monad.Trans.Iter.hoistIterT
                   @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                   @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                   @ a
                   (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI)
                   (\ @ a5 -> Main.$s$fPicture2DF_$s$fPicture2DF_$ccolor @ a5 k1)
                   eta1) -}
9dd74ebb55531831ef0add212b726363
  $s$fPicture2DIterT_$s$fPicture2DIterT_$cp1Picture2D ::
    FreeGame.Class.Affine
      (Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fAffineIterT -}
1a1be14a433b070656662e66f284db99
  $sfromList :: [(Cards.Card, a)] -> Data.Map.Base.Map Cards.Card a
  {- Arity: 1, Strictness: <S,1*U> -}
d4948ca768a1440d6937de26e8d4f4e0
  $stext3 ::
    FreeGame.Internal.Finalizer.FinalizerT GHC.Types.IO a
    -> forall r.
       (Data.Either.Either
          a
          (Control.Monad.Trans.Iter.IterT
             (Control.Monad.Free.Church.F FreeGame.UI.UI) a)
        -> r)
       -> (FreeGame.UI.UI r -> r) -> r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(U)><L,C(U)><C(S),1*C1(U)>,
     Unfolding: (\ @ a
                   (eta1 :: FreeGame.Internal.Finalizer.FinalizerT GHC.Types.IO a)
                   @ r
                   (eta2 :: Data.Either.Either
                              a
                              (Control.Monad.Trans.Iter.IterT
                                 (Control.Monad.Free.Church.F FreeGame.UI.UI) a)
                            -> r)
                   (eta3 :: FreeGame.UI.UI r -> r) ->
                 eta3
                   (FreeGame.UI.FromFinalizer
                      @ r
                      (\ @ r1 (p :: r -> GHC.Types.IO r1) ->
                       eta1
                         `cast`
                       (FreeGame.Internal.Finalizer.N:FinalizerT[0]
                            <GHC.Types.IO>_R <a>_R)
                         @ r1
                         (\ (x :: a) ->
                          p (eta2
                               (Data.Either.Left
                                  @ a
                                  @ (Control.Monad.Trans.Iter.IterT
                                       (Control.Monad.Free.Church.F FreeGame.UI.UI) a)
                                  x))))
                        `cast`
                      (Sym (FreeGame.Internal.Finalizer.N:FinalizerT[0]
                                <GHC.Types.IO>_R <r>_R)))) -}
5a52910d2203ecfa8e8461cc597116a4
  $sunless1 ::
    (Data.Either.Either
       ()
       (Control.Monad.Trans.Iter.IterT
          (Control.Monad.Free.Church.F FreeGame.UI.UI) ())
     -> r)
    -> (FreeGame.UI.UI r -> r) -> r
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (eta1 :: Data.Either.Either
                              ()
                              (Control.Monad.Trans.Iter.IterT
                                 (Control.Monad.Free.Church.F FreeGame.UI.UI) ())
                            -> r)
                   (eta2 :: FreeGame.UI.UI r -> r) ->
                 eta1
                   (Data.Either.Left
                      @ ()
                      @ (Control.Monad.Trans.Iter.IterT
                           (Control.Monad.Free.Church.F FreeGame.UI.UI) ())
                      GHC.Tuple.())) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
6a854270fd0cdeb9e7e2f5082461b55e
  $w$sgo10 ::
    GHC.Types.Int
    -> Cards.Rank
    -> a1
    -> Data.Map.Base.Map Cards.Card a1
    -> Data.Map.Base.Map Cards.Card a1
  {- Arity: 4, Strictness: <L,U(U)><L,U><L,U><S,1*U>, Inline: [0] -}
b1919e71c3e717fd7f107dc7332f46a1
  $wupdate ::
    FreeGame.Data.Font.Font
    -> [Cards.Card]
    -> Data.Map.Base.Map Cards.Card FreeGame.Data.Bitmap.Bitmap
    -> FreeGame.Data.Bitmap.Bitmap
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) ()
  {- Arity: 4,
     Strictness: <L,U(U(U),U(U(U),U(U)),A,U(U))><L,U><L,U><L,U>,
     Inline: [0] -}
5f8cc19ecfd85758d8ecaaf784182639
  add0str :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Base.String) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char s 0# of ww2 {
                   DEFAULT -> s
                   1# -> GHC.Types.: @ GHC.Types.Char Main.add0str1 s }) -}
0854d3518803f6000f9dca6fe4880c96
  add0str1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '0'#) -}
453179aa75317658059965ae038d727c
  main :: GHC.Types.IO (GHC.Base.Maybe ())
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe ()>_R)) -}
cdae5456e46fc493c792593d301eaf20
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, System.Random.StdGen)
                        @ System.Random.StdGen
                        r#
                        System.Random.newStdGen2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { System.Random.StdGen ipv2 ipv3 ->
                 FreeGame.Backend.GLFW.$wrunGame
                   @ ()
                   FreeGame.Types.Windowed
                   0.0##
                   0.0##
                   1200.0##
                   800.0##
                   (let {
                      lvl39 :: [Cards.Card]
                      = Data.OldList.sortBy
                          @ Cards.Card
                          Cards.$fOrdCard_$ccompare
                          (GHC.List.$wunsafeTake
                             @ Cards.Card
                             5#
                             (Cards.shuffleCard Cards.allCards b1))
                    } in
                    Main.$s$fAlternativeIterT_$c>>=
                      @ FreeGame.Data.Font.Font
                      @ ()
                      Main.main19
                      (\ (font :: FreeGame.Data.Font.Font)
                         @ r
                         (eta1 :: Data.Either.Either
                                    ()
                                    (Control.Monad.Trans.Iter.IterT
                                       (Control.Monad.Free.Church.F FreeGame.UI.UI) ())
                                  -> r)[OneShot]
                         (eta2 :: FreeGame.UI.UI r -> r)[OneShot] ->
                       (Main.$s$fAlternativeIterT_$c>>=
                          @ FreeGame.Data.Bitmap.Bitmap
                          @ ()
                          Main.main17
                          (\ (back :: FreeGame.Data.Bitmap.Bitmap)
                             @ r1
                             (eta3 :: Data.Either.Either
                                        ()
                                        (Control.Monad.Trans.Iter.IterT
                                           (Control.Monad.Free.Church.F FreeGame.UI.UI) ())
                                      -> r1)[OneShot]
                             (eta4 :: FreeGame.UI.UI r1 -> r1)[OneShot] ->
                           (Main.$s$fAlternativeIterT_$c>>=
                              @ [FreeGame.Data.Bitmap.Bitmap]
                              @ ()
                              Main.main3
                              (\ (cards :: [FreeGame.Data.Bitmap.Bitmap]) ->
                               Main.$wupdate
                                 font
                                 lvl39
                                 (Main.$sfromList
                                    @ FreeGame.Data.Bitmap.Bitmap
                                    (Cards.tupleCards cards Cards.Clover Main.main2))
                                 back))
                             `cast`
                           (Trans
                                (Control.Monad.Trans.Iter.N:IterT[0]
                                     <Control.Monad.Free.Church.F FreeGame.UI.UI>_N <()>_N)
                                (Control.Monad.Free.Church.N:F[0]
                                     <FreeGame.UI.UI>_R
                                     <Data.Either.Either
                                        ()
                                        (Control.Monad.Trans.Iter.IterT
                                           (Control.Monad.Free.Church.F FreeGame.UI.UI) ())>_R))
                             @ r1
                             eta3
                             eta4)
                            `cast`
                          (<FreeGame.Data.Bitmap.Bitmap>_R
                           ->_R Trans
                                    (Sym (Control.Monad.Free.Church.N:F[0]
                                              <FreeGame.UI.UI>_R
                                              <Data.Either.Either
                                                 ()
                                                 (Control.Monad.Trans.Iter.IterT
                                                    (Control.Monad.Free.Church.F FreeGame.UI.UI)
                                                    ())>_R))
                                    (Sym (Control.Monad.Trans.Iter.N:IterT[0]
                                              <Control.Monad.Free.Church.F FreeGame.UI.UI>_N
                                              <()>_N))))
                         `cast`
                       (Trans
                            (Control.Monad.Trans.Iter.N:IterT[0]
                                 <Control.Monad.Free.Church.F FreeGame.UI.UI>_N <()>_N)
                            (Control.Monad.Free.Church.N:F[0]
                                 <FreeGame.UI.UI>_R
                                 <Data.Either.Either
                                    ()
                                    (Control.Monad.Trans.Iter.IterT
                                       (Control.Monad.Free.Church.F FreeGame.UI.UI) ())>_R))
                         @ r
                         eta1
                         eta2)
                        `cast`
                      (<FreeGame.Data.Font.Font>_R
                       ->_R Trans
                                (Sym (Control.Monad.Free.Church.N:F[0]
                                          <FreeGame.UI.UI>_R
                                          <Data.Either.Either
                                             ()
                                             (Control.Monad.Trans.Iter.IterT
                                                (Control.Monad.Free.Church.F FreeGame.UI.UI)
                                                ())>_R))
                                (Sym (Control.Monad.Trans.Iter.N:IterT[0]
                                          <Control.Monad.Free.Church.F FreeGame.UI.UI>_N <()>_N))))
                   ipv } } }) -}
f71a6824ff08d50f77e37383116eb73c
  main10 :: [GHC.Integer.Type.Integer]
  {- Unfolding: (GHC.Enum.enumDeltaToInteger1
                   Main.main12
                   Main.main11) -}
4e300da514a0e8e0e6e2567eebdf0842
  main11 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (13) -}
3bd5beb215d59afe3bdb7bfcba28d750
  main12 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
2215e14caa24136972fbc2797bd8813d
  main13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ".png"#) -}
836aa45e85d68c3e4b7037db6fa6a612
  main14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "h"#) -}
a238baa15c0c3132eb168144a2af4fff
  main15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "d"#) -}
41b4b349cf3ff93826dfa1ad562ff13a
  main16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "c"#) -}
f13277b15d6fc71dd31b4df61fe0bf5b
  main17 ::
    Control.Monad.Trans.Iter.IterT
      FreeGame.UI.Frame FreeGame.Data.Bitmap.Bitmap
  {- Unfolding: (FreeGame.Data.Bitmap.readBitmap
                   @ (Control.Monad.Trans.Iter.IterT FreeGame.UI.Frame)
                   Main.$s$fMonadIOIterT
                   Main.main18) -}
9f82109d87862867442bd41758e8a885
  main18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "asset/back.png"#) -}
31f809f64657b55fb8d5637895d7cf64
  main19 ::
    Control.Monad.Trans.Iter.IterT
      FreeGame.UI.Frame FreeGame.Data.Font.Font
  {- Unfolding: (FreeGame.Data.Font.loadFontFromFile
                   @ (Control.Monad.Trans.Iter.IterT FreeGame.UI.Frame)
                   Main.$s$fMonadIOIterT
                   Main.main20) -}
1ec98564a36ac812b6c79628d8624773
  main2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
7d7f1e49e07273f8e039799e3b494f91
  main20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "asset/VL-PGothic-Regular.ttf"#) -}
8a737c9ac1b693e85722ac65d957fc30
  main21 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ (GHC.Base.Maybe ())
                   Main.main1
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe ()>_R))) -}
58a2da47dae157790d4af929a14c0a47
  main3 ::
    Control.Monad.Trans.Iter.IterT
      FreeGame.UI.Frame [FreeGame.Data.Bitmap.Bitmap]
  {- Unfolding: (Main.main_go Main.main4) -}
7bb6a88727cdafdf7e04dfd7221cea74
  main4 :: [GHC.IO.FilePath]
  {- Unfolding: (Main.main9 Main.main16 Main.main5) -}
807f483f67da5eba7d67c7559e8a5400
  main5 :: [GHC.IO.FilePath]
  {- Unfolding: (Main.main9 Main.main15 Main.main6) -}
dce8acf2f7f6b21d2c8b5a87a81bf688
  main6 :: [GHC.IO.FilePath]
  {- Unfolding: (Main.main9 Main.main14 Main.main7) -}
46ddc52d46771cb0c4a9d3c0f0402e31
  main7 :: [GHC.IO.FilePath]
  {- Unfolding: (Main.main9
                   Main.main8
                   (GHC.Types.[] @ GHC.IO.FilePath)) -}
656738e2cec3c8a153d0ec28a10b695c
  main8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "s"#) -}
c0cc8263c1dba7a38a9b6abf87f71f3a
  main9 :: [GHC.Types.Char] -> [GHC.IO.FilePath] -> [GHC.IO.FilePath]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ (ds :: [GHC.Types.Char])
                   (ds1 :: [GHC.IO.FilePath])[OneShot] ->
                 letrec {
                   go :: [GHC.Integer.Type.Integer] -> [GHC.IO.FilePath]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds2 :: [GHC.Integer.Type.Integer]) ->
                     case ds2 of wild {
                       [] -> ds1
                       : y ys
                       -> GHC.Types.:
                            @ GHC.IO.FilePath
                            (GHC.CString.unpackAppendCString#
                               "asset/cards/"#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  ds
                                  (case GHC.Show.$w$cshowsPrec3
                                          0#
                                          y
                                          (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                                   let {
                                     s :: GHC.Base.String = GHC.Types.: @ GHC.Types.Char ww3 ww4
                                   } in
                                   case GHC.List.$wlenAcc @ GHC.Types.Char s 0# of ww1 {
                                     DEFAULT -> GHC.Base.++ @ GHC.Types.Char s Main.main13
                                     1#
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          (GHC.Types.: @ GHC.Types.Char Main.add0str1 s)
                                          Main.main13 } })))
                            (go ys) }
                 } in
                 go Main.main10) -}
143441f123e733d36f0b32b79649cfac
  main_go ::
    [GHC.IO.FilePath]
    -> Control.Monad.Trans.Iter.IterT
         FreeGame.UI.Frame [FreeGame.Data.Bitmap.Bitmap]
  {- Arity: 1, Strictness: <S,1*U> -}
764e57fb42430661fe48708b81c7f3cd
  update ::
    FreeGame.Data.Font.Font
    -> [Cards.Card]
    -> [FreeGame.Data.Bitmap.Bitmap]
    -> Data.Map.Base.Map Cards.Card FreeGame.Data.Bitmap.Bitmap
    -> FreeGame.Data.Bitmap.Bitmap
    -> FreeGame.UI.Game ()
  {- Arity: 5,
     Strictness: <L,U(U(U),U(U(U),U(U)),A,U(U))><L,U><L,A><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ (w :: FreeGame.Data.Font.Font)
                   (w1 :: [Cards.Card])
                   (w2 :: [FreeGame.Data.Bitmap.Bitmap])
                   (w3 :: Data.Map.Base.Map Cards.Card FreeGame.Data.Bitmap.Bitmap)
                   (w4 :: FreeGame.Data.Bitmap.Bitmap) ->
                 Main.$wupdate w w1 w3 w4) -}
"SPEC/Main $fAffineF @ UI" [ALWAYS] forall ($dAffine :: FreeGame.Class.Affine
                                                          FreeGame.UI.UI)
  FreeGame.Instances.$fAffineF @ FreeGame.UI.UI $dAffine
  = Main.$s$fAffineF
"SPEC/Main $fAffineF_$cp1Affine @ UI" [ALWAYS] forall ($dAffine :: FreeGame.Class.Affine
                                                                     FreeGame.UI.UI)
  FreeGame.Instances.$fAffineF_$cp1Affine @ FreeGame.UI.UI $dAffine
  = Main.$s$fAffineF_$s$fAffineF_$cp1Affine
"SPEC/Main $fAffineF_$crotateD @ UI" [ALWAYS] forall ($dAffine :: FreeGame.Class.Affine
                                                                    FreeGame.UI.UI)
  FreeGame.Instances.$fAffineF_$crotateD @ FreeGame.UI.UI $dAffine
  = Main.$s$fAffineF_$s$fAffineF_$crotateD
"SPEC/Main $fAffineF_$crotateR @ UI" [ALWAYS] forall ($dAffine :: FreeGame.Class.Affine
                                                                    FreeGame.UI.UI)
  FreeGame.Instances.$fAffineF_$crotateR @ FreeGame.UI.UI $dAffine
  = Main.$s$fAffineF_$s$fAffineF_$crotateR
"SPEC/Main $fAffineF_$cscale @ UI" [ALWAYS] forall ($dAffine :: FreeGame.Class.Affine
                                                                  FreeGame.UI.UI)
  FreeGame.Instances.$fAffineF_$cscale @ FreeGame.UI.UI $dAffine
  = Main.$s$fAffineF_$s$fAffineF_$cscale
"SPEC/Main $fAffineF_$ctranslate @ UI" [ALWAYS] forall ($dAffine :: FreeGame.Class.Affine
                                                                      FreeGame.UI.UI)
  FreeGame.Instances.$fAffineF_$ctranslate @ FreeGame.UI.UI $dAffine
  = Main.$s$fAffineF_$s$fAffineF_$ctranslate
"SPEC/Main $fAffineIterT @ (F UI)" [ALWAYS] forall ($dAffine :: FreeGame.Class.Affine
                                                                  (Control.Monad.Free.Church.F
                                                                     FreeGame.UI.UI))
                                                   ($dMonad :: GHC.Base.Monad
                                                                 (Control.Monad.Free.Church.F
                                                                    FreeGame.UI.UI))
  FreeGame.Instances.$fAffineIterT @ (Control.Monad.Free.Church.F
                                        FreeGame.UI.UI)
                                   $dAffine
                                   $dMonad
  = Main.$s$fAffineIterT
"SPEC/Main $fAffineIterT_$cp1Affine @ (F UI)" [ALWAYS] forall ($dAffine :: FreeGame.Class.Affine
                                                                             (Control.Monad.Free.Church.F
                                                                                FreeGame.UI.UI))
                                                              ($dMonad :: GHC.Base.Monad
                                                                            (Control.Monad.Free.Church.F
                                                                               FreeGame.UI.UI))
  FreeGame.Instances.$fAffineIterT_$cp1Affine @ (Control.Monad.Free.Church.F
                                                   FreeGame.UI.UI)
                                              $dAffine
                                              $dMonad
  = Main.$s$fAffineIterT_$s$fAffineIterT_$cp1Affine
"SPEC/Main $fAffineIterT_$crotateD @ (F UI)" [ALWAYS] forall ($dAffine :: FreeGame.Class.Affine
                                                                            (Control.Monad.Free.Church.F
                                                                               FreeGame.UI.UI))
                                                             ($dMonad :: GHC.Base.Monad
                                                                           (Control.Monad.Free.Church.F
                                                                              FreeGame.UI.UI))
  FreeGame.Instances.$fAffineIterT_$crotateD @ (Control.Monad.Free.Church.F
                                                  FreeGame.UI.UI)
                                             $dAffine
                                             $dMonad
  = Main.$s$fAffineIterT_$s$fAffineIterT_$crotateD
"SPEC/Main $fAffineIterT_$crotateR @ (F UI)" [ALWAYS] forall ($dAffine :: FreeGame.Class.Affine
                                                                            (Control.Monad.Free.Church.F
                                                                               FreeGame.UI.UI))
                                                             ($dMonad :: GHC.Base.Monad
                                                                           (Control.Monad.Free.Church.F
                                                                              FreeGame.UI.UI))
  FreeGame.Instances.$fAffineIterT_$crotateR @ (Control.Monad.Free.Church.F
                                                  FreeGame.UI.UI)
                                             $dAffine
                                             $dMonad
  = Main.$s$fAffineIterT_$s$fAffineIterT_$crotateR
"SPEC/Main $fAffineIterT_$cscale @ (F UI)" [ALWAYS] forall ($dAffine :: FreeGame.Class.Affine
                                                                          (Control.Monad.Free.Church.F
                                                                             FreeGame.UI.UI))
                                                           ($dMonad :: GHC.Base.Monad
                                                                         (Control.Monad.Free.Church.F
                                                                            FreeGame.UI.UI))
  FreeGame.Instances.$fAffineIterT_$cscale @ (Control.Monad.Free.Church.F
                                                FreeGame.UI.UI)
                                           $dAffine
                                           $dMonad
  = Main.$s$fAffineIterT_$s$fAffineIterT_$cscale
"SPEC/Main $fAffineIterT_$ctranslate @ (F UI)" [ALWAYS] forall ($dAffine :: FreeGame.Class.Affine
                                                                              (Control.Monad.Free.Church.F
                                                                                 FreeGame.UI.UI))
                                                               ($dMonad :: GHC.Base.Monad
                                                                             (Control.Monad.Free.Church.F
                                                                                FreeGame.UI.UI))
  FreeGame.Instances.$fAffineIterT_$ctranslate @ (Control.Monad.Free.Church.F
                                                    FreeGame.UI.UI)
                                               $dAffine
                                               $dMonad
  = Main.$s$fAffineIterT_$s$fAffineIterT_$ctranslate
"SPEC/Main $fAlternativeIterT_$c>>= @ (F UI)" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                            (Control.Monad.Free.Church.F
                                                                               FreeGame.UI.UI))
  Control.Monad.Trans.Iter.$fAlternativeIterT_$c>>= @ (Control.Monad.Free.Church.F
                                                         FreeGame.UI.UI)
                                                    $dMonad
  = Main.$s$fAlternativeIterT_$c>>=
"SPEC/Main $fFunctorIterT @ (F UI)" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                  (Control.Monad.Free.Church.F
                                                                     FreeGame.UI.UI))
  Control.Monad.Trans.Iter.$fFunctorIterT @ (Control.Monad.Free.Church.F
                                               FreeGame.UI.UI)
                                          $dMonad
  = Main.$s$fAffineIterT_$s$fFunctorIterT
"SPEC/Main $fFunctorIterT_$c<$ @ (F UI)" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                       (Control.Monad.Free.Church.F
                                                                          FreeGame.UI.UI))
  Control.Monad.Trans.Iter.$fFunctorIterT_$c<$ @ (Control.Monad.Free.Church.F
                                                    FreeGame.UI.UI)
                                               $dMonad
  = Main.$s$fAffineIterT_$s$fFunctorIterT_$c<$
"SPEC/Main $fMonadFreeIdentityIterT @ (F UI)" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                            (Control.Monad.Free.Church.F
                                                                               FreeGame.UI.UI))
  Control.Monad.Trans.Iter.$fMonadFreeIdentityIterT @ (Control.Monad.Free.Church.F
                                                         FreeGame.UI.UI)
                                                    $dMonad
  = Main.$s$fMonadFreeIdentityIterT
"SPEC/Main $fMonadFreefF @ UI" [ALWAYS] forall ($dFunctor1 :: GHC.Base.Functor
                                                                FreeGame.UI.UI)
  Control.Monad.Free.Church.$fMonadFreefF @ FreeGame.UI.UI $dFunctor1
  = Main.$s$fMonadFreefF
"SPEC/Main $fMonadFreefF_$cp1MonadFree @ UI" [ALWAYS] forall ($dFunctor1 :: GHC.Base.Functor
                                                                              FreeGame.UI.UI)
  Control.Monad.Free.Church.$fMonadFreefF_$cp1MonadFree @ FreeGame.UI.UI
                                                        $dFunctor1
  = Main.$s$fMonadFreefF_$s$fMonadFreefF_$cp1MonadFree
"SPEC/Main $fMonadIOIterT @ (F UI)" [ALWAYS] forall ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                    (Control.Monad.Free.Church.F
                                                                       FreeGame.UI.UI))
  Control.Monad.Trans.Iter.$fMonadIOIterT @ (Control.Monad.Free.Church.F
                                               FreeGame.UI.UI)
                                          $dMonadIO
  = Main.$s$fMonadIOIterT
"SPEC/Main $fMonadIterT @ (F UI)" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                (Control.Monad.Free.Church.F
                                                                   FreeGame.UI.UI))
  Control.Monad.Trans.Iter.$fMonadIterT @ (Control.Monad.Free.Church.F
                                             FreeGame.UI.UI)
                                        $dMonad
  = Main.$s$fMonadIOIterT_$s$fMonadIterT
"SPEC/Main $fMonadIterT_$c>> @ (F UI)" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                     (Control.Monad.Free.Church.F
                                                                        FreeGame.UI.UI))
  Control.Monad.Trans.Iter.$fMonadIterT_$c>> @ (Control.Monad.Free.Church.F
                                                  FreeGame.UI.UI)
                                             $dMonad
  = Main.$s$fMonadIOIterT_$s$fMonadIterT_$c>>
"SPEC/Main $fMonadIterT_$cfail @ (F UI)" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                       (Control.Monad.Free.Church.F
                                                                          FreeGame.UI.UI))
  Control.Monad.Trans.Iter.$fMonadIterT_$cfail @ (Control.Monad.Free.Church.F
                                                    FreeGame.UI.UI)
                                               $dMonad
  = Main.$s$fMonadIOIterT_$s$fMonadIterT_$cfail
"SPEC/Main $fPicture2DF @ UI" [ALWAYS] forall ($dPicture2D :: FreeGame.Class.Picture2D
                                                                FreeGame.UI.UI)
                                              ($dFunctor1 :: GHC.Base.Functor FreeGame.UI.UI)
  FreeGame.Instances.$fPicture2DF @ FreeGame.UI.UI
                                  $dPicture2D
                                  $dFunctor1
  = Main.$s$fPicture2DF
"SPEC/Main $fPicture2DF_$cbitmap @ UI" [ALWAYS] forall ($dPicture2D :: FreeGame.Class.Picture2D
                                                                         FreeGame.UI.UI)
                                                       ($dFunctor1 :: GHC.Base.Functor
                                                                        FreeGame.UI.UI)
  FreeGame.Instances.$fPicture2DF_$cbitmap @ FreeGame.UI.UI
                                           $dPicture2D
                                           $dFunctor1
  = Main.$s$fPicture2DF_$s$fPicture2DF_$cbitmap
"SPEC/Main $fPicture2DF_$cbitmapOnce @ UI" [ALWAYS] forall ($dPicture2D :: FreeGame.Class.Picture2D
                                                                             FreeGame.UI.UI)
                                                           ($dFunctor1 :: GHC.Base.Functor
                                                                            FreeGame.UI.UI)
  FreeGame.Instances.$fPicture2DF_$cbitmapOnce @ FreeGame.UI.UI
                                               $dPicture2D
                                               $dFunctor1
  = Main.$s$fPicture2DF_$s$fPicture2DF_$cbitmapOnce
"SPEC/Main $fPicture2DF_$cblendMode @ UI" [ALWAYS] forall ($dPicture2D :: FreeGame.Class.Picture2D
                                                                            FreeGame.UI.UI)
                                                          ($dFunctor1 :: GHC.Base.Functor
                                                                           FreeGame.UI.UI)
  FreeGame.Instances.$fPicture2DF_$cblendMode @ FreeGame.UI.UI
                                              $dPicture2D
                                              $dFunctor1
  = Main.$s$fPicture2DF_$s$fPicture2DF_$cblendMode
"SPEC/Main $fPicture2DF_$ccolor @ UI" [ALWAYS] forall ($dPicture2D :: FreeGame.Class.Picture2D
                                                                        FreeGame.UI.UI)
                                                      ($dFunctor1 :: GHC.Base.Functor
                                                                       FreeGame.UI.UI)
  FreeGame.Instances.$fPicture2DF_$ccolor @ FreeGame.UI.UI
                                          $dPicture2D
                                          $dFunctor1
  = Main.$s$fPicture2DF_$s$fPicture2DF_$ccolor
"SPEC/Main $fPicture2DF_$cp1Picture2D @ UI" [ALWAYS] forall ($dPicture2D :: FreeGame.Class.Picture2D
                                                                              FreeGame.UI.UI)
                                                            ($dFunctor1 :: GHC.Base.Functor
                                                                             FreeGame.UI.UI)
  FreeGame.Instances.$fPicture2DF_$cp1Picture2D @ FreeGame.UI.UI
                                                $dPicture2D
                                                $dFunctor1
  = Main.$s$fPicture2DF_$s$fPicture2DF_$cp1Picture2D
"SPEC/Main $fPicture2DIterT @ (F UI)" [ALWAYS] forall ($dPicture2D :: FreeGame.Class.Picture2D
                                                                        (Control.Monad.Free.Church.F
                                                                           FreeGame.UI.UI))
                                                      ($dMonad :: GHC.Base.Monad
                                                                    (Control.Monad.Free.Church.F
                                                                       FreeGame.UI.UI))
  FreeGame.Instances.$fPicture2DIterT @ (Control.Monad.Free.Church.F
                                           FreeGame.UI.UI)
                                      $dPicture2D
                                      $dMonad
  = Main.$s$fPicture2DIterT
"SPEC/Main $fPicture2DIterT_$cblendMode @ (F UI)" [ALWAYS] forall ($dPicture2D :: FreeGame.Class.Picture2D
                                                                                    (Control.Monad.Free.Church.F
                                                                                       FreeGame.UI.UI))
                                                                  ($dMonad :: GHC.Base.Monad
                                                                                (Control.Monad.Free.Church.F
                                                                                   FreeGame.UI.UI))
  FreeGame.Instances.$fPicture2DIterT_$cblendMode @ (Control.Monad.Free.Church.F
                                                       FreeGame.UI.UI)
                                                  $dPicture2D
                                                  $dMonad
  = Main.$s$fPicture2DIterT_$s$fPicture2DIterT_$cblendMode
"SPEC/Main $fPicture2DIterT_$ccolor @ (F UI)" [ALWAYS] forall ($dPicture2D :: FreeGame.Class.Picture2D
                                                                                (Control.Monad.Free.Church.F
                                                                                   FreeGame.UI.UI))
                                                              ($dMonad :: GHC.Base.Monad
                                                                            (Control.Monad.Free.Church.F
                                                                               FreeGame.UI.UI))
  FreeGame.Instances.$fPicture2DIterT_$ccolor @ (Control.Monad.Free.Church.F
                                                   FreeGame.UI.UI)
                                              $dPicture2D
                                              $dMonad
  = Main.$s$fPicture2DIterT_$s$fPicture2DIterT_$ccolor
"SPEC/Main $fPicture2DIterT_$cp1Picture2D @ (F UI)" [ALWAYS] forall ($dPicture2D :: FreeGame.Class.Picture2D
                                                                                      (Control.Monad.Free.Church.F
                                                                                         FreeGame.UI.UI))
                                                                    ($dMonad :: GHC.Base.Monad
                                                                                  (Control.Monad.Free.Church.F
                                                                                     FreeGame.UI.UI))
  FreeGame.Instances.$fPicture2DIterT_$cp1Picture2D @ (Control.Monad.Free.Church.F
                                                         FreeGame.UI.UI)
                                                    $dPicture2D
                                                    $dMonad
  = Main.$s$fPicture2DIterT_$s$fPicture2DIterT_$cp1Picture2D
"SPEC/Main fromList @ Card _" [ALWAYS] forall @ a
                                              ($dOrd :: GHC.Classes.Ord Cards.Card)
  Data.Map.Base.fromList @ Cards.Card @ a $dOrd = Main.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

