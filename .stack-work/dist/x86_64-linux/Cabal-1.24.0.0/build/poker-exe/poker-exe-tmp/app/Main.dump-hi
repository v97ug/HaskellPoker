
==================== FINAL INTERFACE ====================
2016-10-15 10:42:20.415546 UTC

interface main@main:Main 8001
  interface hash: 3cff8cf0390cd0ed92fa9ec4759dad8c
  ABI hash: be10753d4bcf9805d4a2893d3e42932c
  export-list hash: 4edb1e35dfcc6f8eaaa9140af269ff1f
  orphan hash: adf38fb84d3289239c1782671f54a4f2
  flag hash: 1d5ae373ead6ea89e2b573c720a08da9
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.add0str
  Main.main
  Main.update
module dependencies: Cards
package dependencies: GLFW-b-1.4.8.1@GLFW-b-1.4.8.1-2oLi8d8Om6j90ytPw2you1
                      GLURaw-2.0.0.2@GLURaw-2.0.0.2-CXqiFREEjzx2h5fh9cccgi
                      JuicyPixels-3.2.8@JuicyPixels-3.2.8-9xVAaSn1ptq1f1nvfTAuq3
                      JuicyPixels-util-0.2@JuicyPixels-util-0.2-DLVBsASb875DbzDt8LnQRe
                      ObjectName-1.1.0.1@ObjectName-1.1.0.1-HHHIolNI8Pm5H3OGkgSUrO
                      OpenGL-3.0.1.0@OpenGL-3.0.1.0-L3kgxMgk99dGXu7ugl8pfi
                      OpenGLRaw-3.2.3.0@OpenGLRaw-3.2.3.0-1lEp0meCLgF9BpuYJlcXHY
                      StateVar-1.1.0.4@StateVar-1.1.0.4-CJpWsiXJdd89SnV9dZtTwc
                      adjunctions-4.3@adjunctions-4.3-GCEjqNzETW59DSv4CMOptV
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      base-orphans-0.5.4@base-orphans-0.5.4-5IQvrjd7gNP548VkOOyIq6
                      bifunctors-5.4.1@bifunctors-5.4.1-2CMldPyzyp9LmjO5mJ1j8k
                      binary-0.8.3.0@binary-0.8.3.0-C4Tdq516dA2P2jpb0pxQ0
                      bindings-GLFW-3.1.2.2@bindings-GLFW-3.1.2.2-2GG6GK5a2OkK8NpUgT7p3p
                      boundingboxes-0.2.3@boundingboxes-0.2.3-B5Lpk0UgQX9FW4DN0qgVnk
                      bytes-0.15.2@bytes-0.15.2-HP6DsJicUjcLfydsuJ4jcG
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      cereal-0.5.3.0@cereal-0.5.3.0-JAeSmYgm4O6ETcVwWu1cR8
                      colors-0.3.0.2@colors-0.3.0.2-AvkeI2ZeqYcBVc35VrD0W6
                      comonad-5@comonad-5-1X5fCjgjqtUIqJcEv6Bntb
                      containers-0.5.7.1@containers-0.5.7.1-Ha3qpRxMQ6UJleQLCYcCoM
                      contravariant-1.4@contravariant-1.4-9srMvDZNIDHARyPiex7EnJ
                      control-bool-0.2.1@control-bool-0.2.1-Jyyb4EXrMDw8rIK211gyYF
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.2.6.2@directory-1.2.6.2
                      distributive-0.5.0.2@distributive-0.5.0.2-Cdz2vLOk85j1doGXLcictT
                      exceptions-0.8.3@exceptions-0.8.3-7py7fmRxowDFpHmiHGKrTb
                      filepath-1.4.1.0@filepath-1.4.1.0
                      fixed-0.2.1.1@fixed-0.2.1.1-21JkkJmr6h52cZo1o8cauA
                      free-4.12.4@free-4.12.4-BgJ9ci1u1y48vHU0OFcVsx
                      free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB
                      freetype2-0.1.1@freetype2-0.1.1-BNzVW0Qm4YZInBL0rkUB7d
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      half-0.2.2.3@half-0.2.2.3-BFHx0LiJemg6baNXrjGThF
                      hashable-1.2.4.0@hashable-1.2.4.0-AwGBZwH5NOu32fFT3k5XwG
                      integer-gmp-1.0.0.1
                      kan-extensions-5.0.1@kan-extensions-5.0.1-GsZ3y7l4oBZBdQifYSzpU9
                      lens-4.14@lens-4.14-IJHIu5ECNzmIvypqaucYG7
                      linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      poker-0.1.0.0@poker-0.1.0.0-6b4Qq4MUzmfCvWidKCYUPf
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-FAyB4iuuM7cHXdrLMZtdXq
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      profunctors-5.2@profunctors-5.2-8aCFgYqhmEQC00Ujrg8wb
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      reflection-2.1.2@reflection-2.1.2-J1ZzlxijzaHGRixYxgxlf9
                      scientific-0.3.4.9@scientific-0.3.4.9-6A89ogaqIZMGXcxRrTFA5h
                      semigroupoids-5.1@semigroupoids-5.1-Gg9LyNoAhKN7Lad6MtBCkX
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx
                      template-haskell-2.11.0.0
                      text-1.2.2.1@text-1.2.2.1-BbJ8XwxQPYLIiQbtPTWn3j
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-81lZyuOJOvsD0zyCv2TKld
                      unix-2.7.2.0@unix-2.7.2.0
                      unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-L1VZsahRbVJ1PITZedf9hg
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
                      zlib-0.6.1.1@zlib-0.6.1.1-4cYT5jyS3jw6zZyCUZMz3T
orphans: GLFW-b-1.4.8.1@GLFW-b-1.4.8.1-2oLi8d8Om6j90ytPw2you1:Graphics.UI.GLFW.Types
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0-C4Tdq516dA2P2jpb0pxQ0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         colors-0.3.0.2@colors-0.3.0.2-AvkeI2ZeqYcBVc35VrD0W6:Data.Color
         free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame
         free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame.Backend.GLFW
         free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame.Instances
         hashable-1.2.4.0@hashable-1.2.4.0-AwGBZwH5NOu32fFT3k5XwG:Data.Hashable.Generic
         linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6:Linear.Instances
         reflection-2.1.2@reflection-2.1.2-J1ZzlxijzaHGRixYxgxlf9:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-BbJ8XwxQPYLIiQbtPTWn3j:Data.Text
         text-1.2.2.1@text-1.2.2.1-BbJ8XwxQPYLIiQbtPTWn3j:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-BbJ8XwxQPYLIiQbtPTWn3j:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
family instance modules: GLFW-b-1.4.8.1@GLFW-b-1.4.8.1-2oLi8d8Om6j90ytPw2you1:Graphics.UI.GLFW.Types
                         JuicyPixels-3.2.8@JuicyPixels-3.2.8-9xVAaSn1ptq1f1nvfTAuq3:Codec.Picture.Tga
                         JuicyPixels-3.2.8@JuicyPixels-3.2.8-9xVAaSn1ptq1f1nvfTAuq3:Codec.Picture.Tiff
                         JuicyPixels-3.2.8@JuicyPixels-3.2.8-9xVAaSn1ptq1f1nvfTAuq3:Codec.Picture.Types
                         adjunctions-4.3@adjunctions-4.3-GCEjqNzETW59DSv4CMOptV:Data.Functor.Rep
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Compose
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.Functor.Product base-4.9.0.0:Data.Functor.Sum
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         bifunctors-5.4.1@bifunctors-5.4.1-2CMldPyzyp9LmjO5mJ1j8k:Data.Bifunctor.Biff
                         bifunctors-5.4.1@bifunctors-5.4.1-2CMldPyzyp9LmjO5mJ1j8k:Data.Bifunctor.Clown
                         bifunctors-5.4.1@bifunctors-5.4.1-2CMldPyzyp9LmjO5mJ1j8k:Data.Bifunctor.Flip
                         bifunctors-5.4.1@bifunctors-5.4.1-2CMldPyzyp9LmjO5mJ1j8k:Data.Bifunctor.Join
                         bifunctors-5.4.1@bifunctors-5.4.1-2CMldPyzyp9LmjO5mJ1j8k:Data.Bifunctor.Joker
                         bifunctors-5.4.1@bifunctors-5.4.1-2CMldPyzyp9LmjO5mJ1j8k:Data.Bifunctor.Product
                         bifunctors-5.4.1@bifunctors-5.4.1-2CMldPyzyp9LmjO5mJ1j8k:Data.Bifunctor.Sum
                         bifunctors-5.4.1@bifunctors-5.4.1-2CMldPyzyp9LmjO5mJ1j8k:Data.Bifunctor.Tannen
                         bifunctors-5.4.1@bifunctors-5.4.1-2CMldPyzyp9LmjO5mJ1j8k:Data.Bifunctor.Wrapped
                         bytes-0.15.2@bytes-0.15.2-HP6DsJicUjcLfydsuJ4jcG:Data.Bytes.Get
                         bytes-0.15.2@bytes-0.15.2-HP6DsJicUjcLfydsuJ4jcG:Data.Bytes.Signed
                         bytes-0.15.2@bytes-0.15.2-HP6DsJicUjcLfydsuJ4jcG:Data.Bytes.VarInt
                         containers-0.5.7.1@containers-0.5.7.1-Ha3qpRxMQ6UJleQLCYcCoM:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1-Ha3qpRxMQ6UJleQLCYcCoM:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1-Ha3qpRxMQ6UJleQLCYcCoM:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1-Ha3qpRxMQ6UJleQLCYcCoM:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1-Ha3qpRxMQ6UJleQLCYcCoM:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         kan-extensions-5.0.1@kan-extensions-5.0.1-GsZ3y7l4oBZBdQifYSzpU9:Data.Functor.Day
                         kan-extensions-5.0.1@kan-extensions-5.0.1-GsZ3y7l4oBZBdQifYSzpU9:Data.Functor.Yoneda
                         lens-4.14@lens-4.14-IJHIu5ECNzmIvypqaucYG7:Control.Lens.At
                         lens-4.14@lens-4.14-IJHIu5ECNzmIvypqaucYG7:Control.Lens.Internal.Indexed
                         lens-4.14@lens-4.14-IJHIu5ECNzmIvypqaucYG7:Control.Lens.Reified
                         lens-4.14@lens-4.14-IJHIu5ECNzmIvypqaucYG7:Control.Lens.Tuple
                         lens-4.14@lens-4.14-IJHIu5ECNzmIvypqaucYG7:Control.Lens.Wrapped
                         lens-4.14@lens-4.14-IJHIu5ECNzmIvypqaucYG7:Control.Lens.Zoom
                         linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6:Linear.Plucker
                         linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6:Linear.Quaternion
                         linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6:Linear.V
                         linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6:Linear.V0
                         linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6:Linear.V1
                         linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6:Linear.V2
                         linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6:Linear.V3
                         linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6:Linear.V4
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         profunctors-5.2@profunctors-5.2-8aCFgYqhmEQC00Ujrg8wb:Data.Profunctor.Rep
                         tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx:Data.Tagged
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-BbJ8XwxQPYLIiQbtPTWn3j:Data.Text
                         text-1.2.2.1@text-1.2.2.1-BbJ8XwxQPYLIiQbtPTWn3j:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-L1VZsahRbVJ1PITZedf9hg:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-L1VZsahRbVJ1PITZedf9hg:Data.HashSet
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed.Base
                         zlib-0.6.1.1@zlib-0.6.1.1-4cYT5jyS3jw6zZyCUZMz3T:Codec.Compression.Zlib.Stream
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Traversable 7ce5b7ee67475ac3d03ae825b86efd9f
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  boundingboxes-0.2.3@boundingboxes-0.2.3-B5Lpk0UgQX9FW4DN0qgVnk:Data.BoundingBox eb7472d85f9034918394f129e5953c2f
import  -/  containers-0.5.7.1@containers-0.5.7.1-Ha3qpRxMQ6UJleQLCYcCoM:Data.Map 0d58213e348c347f293320a2da4174e1
import  -/  containers-0.5.7.1@containers-0.5.7.1-Ha3qpRxMQ6UJleQLCYcCoM:Data.Map.Base aa779da3873adb5152d8331e38c5c17f
import  -/  free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame 422a6c8886d90efb38586a0d8b0a56b6
import  -/  free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame.Class 9c829726437c22e4ce2471a3ef9e481d
import  -/  free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame.Data.Bitmap 2133b386e6455619bb70c33c956013aa
import  -/  free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame.Data.Font 67b54171ade9c7f96245d64ea5f4fa40
import  -/  free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame.Types 99a4ef4c051776899396f2308d46e80b
import  -/  free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame.UI 0a12b16f77bebac1e6f0f6ec43ed3b91
import  -/  free-game-1.1.90@free-game-1.1.90-Ic1poE82j1wINymiLed5pB:FreeGame.Util 1408c732a27dde77904b99db88c46ac0
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  linear-1.20.5@linear-1.20.5-4kpNUCVxUq2DOGtNJfuat6:Linear.V2 e33ad0d2afac462e321b5adc0d9c5ea3
import  -/  Cards 9a3bb8249dc0b65f319c541ef69010ce
  exports: 73f626470a4ec3743f554a33bdcd6c47
  Card 0c68e2144bde33f5725c7745e2ae21ec
  Clover 685a3de32d86f19ed78a7e7547ac9269
  allCards 975a80e28297b5cd28831929f825f777
  showPictCards 02f5313a7f96470830ec6f5171d8d928
  shuffleCard 0c20863990abf2255b310ef254b77b8f
  tupleCards 2480c26874e19ce7d01cb1088d64ec53
import  -/  poker-0.1.0.0@poker-0.1.0.0-6b4Qq4MUzmfCvWidKCYUPf:Lib 0593fcc5996622f5c520a495651e5517
import  -/  random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe:System.Random 12e582ce6a18ca02c107789bb28c509c
88f90124b1b09a50edd27695fa769376
  $s$fAlternativeIterT_$c>>= ::
    Control.Monad.Trans.Iter.IterT
      (Control.Monad.Free.Church.F FreeGame.UI.UI) a
    -> (a
        -> Control.Monad.Trans.Iter.IterT
             (Control.Monad.Free.Church.F FreeGame.UI.UI) b)
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,C(C1(C1(U)))><L,U><L,U>,
     Inline: [NEVER] -}
66197c9b2263e87aaac0e0efbf51d2aa
  $s$fMonadFreeIdentityIterT ::
    Control.Monad.Free.Class.MonadFree
      Data.Functor.Identity.Identity
      (Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Functor.Identity.Identity
                  @ (Control.Monad.Trans.Iter.IterT
                       (Control.Monad.Free.Church.F FreeGame.UI.UI))
                  (Control.Monad.Trans.Iter.$fMonadFreeIdentityIterT_$cp1MonadFree
                     @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                     (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI))
                  (\ @ a
                     (eta1 :: Data.Functor.Identity.Identity
                                (Control.Monad.Trans.Iter.IterT
                                   (Control.Monad.Free.Church.F FreeGame.UI.UI) a))
                     @ r
                     (eta2 :: Data.Either.Either
                                a
                                (Control.Monad.Trans.Iter.IterT
                                   (Control.Monad.Free.Church.F FreeGame.UI.UI) a)
                              -> r)
                     (eta3 :: FreeGame.UI.UI r -> r) ->
                   (Control.Monad.Free.Church.$fApplicativeF_$cpure
                      @ FreeGame.UI.UI
                      @ (Data.Either.Either
                           a
                           (Control.Monad.Trans.Iter.IterT
                              (Control.Monad.Free.Church.F FreeGame.UI.UI) a))
                      (Data.Either.Right
                         @ a
                         @ (Control.Monad.Trans.Iter.IterT
                              (Control.Monad.Free.Church.F FreeGame.UI.UI) a)
                         (Data.Functor.Identity.runIdentity
                            @ (Control.Monad.Trans.Iter.IterT
                                 (Control.Monad.Free.Church.F FreeGame.UI.UI) a)
                            eta1)))
                     `cast`
                   (Control.Monad.Free.Church.N:F[0]
                        <FreeGame.UI.UI>_R
                        <Data.Either.Either
                           a
                           (Control.Monad.Trans.Iter.IterT
                              (Control.Monad.Free.Church.F FreeGame.UI.UI) a)>_R)
                     @ r
                     eta2
                     eta3)
                    `cast`
                  (forall (a :: <*>_N).
                   <Data.Functor.Identity.Identity
                      (Control.Monad.Trans.Iter.IterT
                         (Control.Monad.Free.Church.F FreeGame.UI.UI) a)>_R
                   ->_R Trans
                            (Sym (Control.Monad.Free.Church.N:F[0]
                                      <FreeGame.UI.UI>_R
                                      <Data.Either.Either
                                         a
                                         (Control.Monad.Trans.Iter.IterT
                                            (Control.Monad.Free.Church.F FreeGame.UI.UI) a)>_R))
                            (Sym (Control.Monad.Trans.Iter.N:IterT[0]
                                      <Control.Monad.Free.Church.F FreeGame.UI.UI>_N <a>_N))) -}
bbba66f1fb16c536751dd1321c830806
  $s$fMonadIOIterT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Iter.IterT
                       (Control.Monad.Free.Church.F FreeGame.UI.UI))
                  Main.$s$fMonadIOIterT_$s$fMonadIOIterT_$cp1MonadIO
                  (Control.Monad.Trans.Iter.$fMonadIOIterT_$cliftIO
                     @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                     FreeGame.$fMonadIOF) -}
8aef45e18724ac8f65d71ee5d6a579e0
  $s$fMonadIOIterT_$s$fMonadIOIterT_$cp1MonadIO ::
    GHC.Base.Monad
      (Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadIOIterT_$s$fMonadIterT -}
a47338f6db6d84a904b72b8373008351
  $s$fMonadIOIterT_$s$fMonadIterT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Iter.IterT
                       (Control.Monad.Free.Church.F FreeGame.UI.UI))
                  (Control.Monad.Trans.Iter.$fMonadIterT_$cp1Monad
                     @ (Control.Monad.Free.Church.F FreeGame.UI.UI)
                     (Control.Monad.Free.Church.$fMonadF @ FreeGame.UI.UI))
                  Main.$s$fAlternativeIterT_$c>>=
                  Main.$s$fMonadIOIterT_$s$fMonadIterT_$c>>
                  (\ @ a
                     (eta1 :: a)
                     @ r
                     (eta2 :: Data.Either.Either
                                a
                                (Control.Monad.Trans.Iter.IterT
                                   (Control.Monad.Free.Church.F FreeGame.UI.UI) a)
                              -> r)
                     (eta3 :: FreeGame.UI.UI r -> r) ->
                   (Control.Monad.Free.Church.$fApplicativeF_$cpure
                      @ FreeGame.UI.UI
                      @ (Data.Either.Either
                           a
                           (Control.Monad.Trans.Iter.IterT
                              (Control.Monad.Free.Church.F FreeGame.UI.UI) a))
                      (Data.Either.Left
                         @ a
                         @ (Control.Monad.Trans.Iter.IterT
                              (Control.Monad.Free.Church.F FreeGame.UI.UI) a)
                         eta1))
                     `cast`
                   (Control.Monad.Free.Church.N:F[0]
                        <FreeGame.UI.UI>_R
                        <Data.Either.Either
                           a
                           (Control.Monad.Trans.Iter.IterT
                              (Control.Monad.Free.Church.F FreeGame.UI.UI) a)>_R)
                     @ r
                     eta2
                     eta3)
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Trans
                            (Sym (Control.Monad.Free.Church.N:F[0]
                                      <FreeGame.UI.UI>_R
                                      <Data.Either.Either
                                         a
                                         (Control.Monad.Trans.Iter.IterT
                                            (Control.Monad.Free.Church.F FreeGame.UI.UI) a)>_R))
                            (Sym (Control.Monad.Trans.Iter.N:IterT[0]
                                      <Control.Monad.Free.Church.F FreeGame.UI.UI>_N <a>_N)))
                  Main.$s$fMonadIOIterT_$s$fMonadIterT_$cfail -}
a0f8068ac75d6a98656bfc48ba53d046
  $s$fMonadIOIterT_$s$fMonadIterT_$c>> ::
    Control.Monad.Trans.Iter.IterT
      (Control.Monad.Free.Church.F FreeGame.UI.UI) a
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) b
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,C(C1(U))><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Iter.IterT
                            (Control.Monad.Free.Church.F FreeGame.UI.UI) a)
                   (k :: Control.Monad.Trans.Iter.IterT
                           (Control.Monad.Free.Church.F FreeGame.UI.UI) b)
                   @ r
                   (eta1 :: Data.Either.Either
                              b
                              (Control.Monad.Trans.Iter.IterT
                                 (Control.Monad.Free.Church.F FreeGame.UI.UI) b)
                            -> r)
                   (eta2 :: FreeGame.UI.UI r -> r) ->
                 (Main.$s$fAlternativeIterT_$c>>= @ a @ b m1 (\ (ds :: a) -> k))
                   `cast`
                 (Trans
                      (Control.Monad.Trans.Iter.N:IterT[0]
                           <Control.Monad.Free.Church.F FreeGame.UI.UI>_N <b>_N)
                      (Control.Monad.Free.Church.N:F[0]
                           <FreeGame.UI.UI>_R
                           <Data.Either.Either
                              b
                              (Control.Monad.Trans.Iter.IterT
                                 (Control.Monad.Free.Church.F FreeGame.UI.UI) b)>_R))
                   @ r
                   eta1
                   eta2)
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Iter.IterT
                    (Control.Monad.Free.Church.F FreeGame.UI.UI) a>_R
                 ->_R <Control.Monad.Trans.Iter.IterT
                         (Control.Monad.Free.Church.F FreeGame.UI.UI) b>_R
                 ->_R Trans
                          (Sym (Control.Monad.Free.Church.N:F[0]
                                    <FreeGame.UI.UI>_R
                                    <Data.Either.Either
                                       b
                                       (Control.Monad.Trans.Iter.IterT
                                          (Control.Monad.Free.Church.F FreeGame.UI.UI) b)>_R))
                          (Sym (Control.Monad.Trans.Iter.N:IterT[0]
                                    <Control.Monad.Free.Church.F FreeGame.UI.UI>_N <b>_N))) -}
5cdc533dd303c3cc0617ec1b9ff5609c
  $s$fMonadIOIterT_$s$fMonadIterT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) a
  {- Arity: 1, Strictness: <L,A>, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (ds :: GHC.Base.String) ->
                 Control.Monad.Trans.Iter.never
                   @ Data.Functor.Identity.Identity
                   @ (Control.Monad.Trans.Iter.IterT
                        (Control.Monad.Free.Church.F FreeGame.UI.UI))
                   @ a
                   Data.Functor.Identity.$fMonadIdentity
                   Main.$s$fMonadFreeIdentityIterT) -}
1a1be14a433b070656662e66f284db99
  $sfromList :: [(Cards.Card, a)] -> Data.Map.Base.Map Cards.Card a
  {- Arity: 1, Strictness: <S,1*U> -}
5a52910d2203ecfa8e8461cc597116a4
  $sunless1 ::
    (Data.Either.Either
       ()
       (Control.Monad.Trans.Iter.IterT
          (Control.Monad.Free.Church.F FreeGame.UI.UI) ())
     -> r)
    -> (FreeGame.UI.UI r -> r) -> r
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (eta1 :: Data.Either.Either
                              ()
                              (Control.Monad.Trans.Iter.IterT
                                 (Control.Monad.Free.Church.F FreeGame.UI.UI) ())
                            -> r)
                   (eta2 :: FreeGame.UI.UI r -> r) ->
                 eta1
                   (Data.Either.Left
                      @ ()
                      @ (Control.Monad.Trans.Iter.IterT
                           (Control.Monad.Free.Church.F FreeGame.UI.UI) ())
                      GHC.Tuple.())) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
6a854270fd0cdeb9e7e2f5082461b55e
  $w$sgo10 ::
    GHC.Types.Int
    -> Cards.Rank
    -> a1
    -> Data.Map.Base.Map Cards.Card a1
    -> Data.Map.Base.Map Cards.Card a1
  {- Arity: 4, Strictness: <L,U(U)><L,U><L,U><S,1*U>, Inline: [0] -}
11363cfd8014fc80fee8219a53401431
  $wupdate ::
    [Cards.Card]
    -> Data.Map.Base.Map Cards.Card FreeGame.Data.Bitmap.Bitmap
    -> FreeGame.Data.Bitmap.Bitmap
    -> Control.Monad.Trans.Iter.IterT
         (Control.Monad.Free.Church.F FreeGame.UI.UI) ()
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0] -}
5f8cc19ecfd85758d8ecaaf784182639
  add0str :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Base.String) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char s 0# of ww2 {
                   DEFAULT -> s
                   1# -> GHC.Types.: @ GHC.Types.Char Main.add0str1 s }) -}
0854d3518803f6000f9dca6fe4880c96
  add0str1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '0'#) -}
f0382ec7670b59355dee88c83be36b9c
  main :: GHC.Types.IO (GHC.Base.Maybe ())
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe ()>_R)) -}
bca59da563ef1ec45ce36a33edcf59b9
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, System.Random.StdGen)
                        @ System.Random.StdGen
                        r#
                        System.Random.newStdGen2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { System.Random.StdGen ipv2 ipv3 ->
                 FreeGame.Backend.GLFW.$wrunGame
                   @ ()
                   FreeGame.Types.Windowed
                   0.0##
                   0.0##
                   1200.0##
                   800.0##
                   (let {
                      lvl23 :: [Cards.Card]
                      = Data.OldList.sortBy
                          @ Cards.Card
                          Cards.$fOrdCard_$ccompare
                          (GHC.List.$wunsafeTake
                             @ Cards.Card
                             5#
                             (Cards.shuffleCard Cards.allCards b1))
                    } in
                    let {
                      lvl24 :: FreeGame.Data.Bitmap.Bitmap
                               -> forall r.
                                  (Data.Either.Either
                                     ()
                                     (Control.Monad.Trans.Iter.IterT
                                        (Control.Monad.Free.Church.F FreeGame.UI.UI) ())
                                   -> r)
                                  -> (FreeGame.UI.UI r -> r) -> r
                        {- Arity: 3 -}
                      = \ (back :: FreeGame.Data.Bitmap.Bitmap)
                          @ r
                          (eta1 :: Data.Either.Either
                                     ()
                                     (Control.Monad.Trans.Iter.IterT
                                        (Control.Monad.Free.Church.F FreeGame.UI.UI) ())
                                   -> r)[OneShot]
                          (eta2 :: FreeGame.UI.UI r -> r)[OneShot] ->
                        (Main.$s$fAlternativeIterT_$c>>=
                           @ [FreeGame.Data.Bitmap.Bitmap]
                           @ ()
                           Main.main7
                           (\ (cards :: [FreeGame.Data.Bitmap.Bitmap]) ->
                            Main.$wupdate
                              lvl23
                              (Main.$sfromList
                                 @ FreeGame.Data.Bitmap.Bitmap
                                 (Cards.tupleCards cards Cards.Clover Main.main6))
                              back))
                          `cast`
                        (Trans
                             (Control.Monad.Trans.Iter.N:IterT[0]
                                  <Control.Monad.Free.Church.F FreeGame.UI.UI>_N <()>_N)
                             (Control.Monad.Free.Church.N:F[0]
                                  <FreeGame.UI.UI>_R
                                  <Data.Either.Either
                                     ()
                                     (Control.Monad.Trans.Iter.IterT
                                        (Control.Monad.Free.Church.F FreeGame.UI.UI) ())>_R))
                          @ r
                          eta1
                          eta2
                    } in
                    Main.$s$fAlternativeIterT_$c>>=
                      @ FreeGame.Data.Font.Font
                      @ ()
                      Main.main4
                      (\ (font :: FreeGame.Data.Font.Font)
                         @ r
                         (eta1 :: Data.Either.Either
                                    ()
                                    (Control.Monad.Trans.Iter.IterT
                                       (Control.Monad.Free.Church.F FreeGame.UI.UI) ())
                                  -> r)[OneShot]
                         (eta2 :: FreeGame.UI.UI r -> r)[OneShot] ->
                       (Main.$s$fAlternativeIterT_$c>>=
                          @ FreeGame.Data.Bitmap.Bitmap
                          @ ()
                          Main.main2
                          lvl24
                            `cast`
                          (<FreeGame.Data.Bitmap.Bitmap>_R
                           ->_R Trans
                                    (Sym (Control.Monad.Free.Church.N:F[0]
                                              <FreeGame.UI.UI>_R
                                              <Data.Either.Either
                                                 ()
                                                 (Control.Monad.Trans.Iter.IterT
                                                    (Control.Monad.Free.Church.F FreeGame.UI.UI)
                                                    ())>_R))
                                    (Sym (Control.Monad.Trans.Iter.N:IterT[0]
                                              <Control.Monad.Free.Church.F FreeGame.UI.UI>_N
                                              <()>_N))))
                         `cast`
                       (Trans
                            (Control.Monad.Trans.Iter.N:IterT[0]
                                 <Control.Monad.Free.Church.F FreeGame.UI.UI>_N <()>_N)
                            (Control.Monad.Free.Church.N:F[0]
                                 <FreeGame.UI.UI>_R
                                 <Data.Either.Either
                                    ()
                                    (Control.Monad.Trans.Iter.IterT
                                       (Control.Monad.Free.Church.F FreeGame.UI.UI) ())>_R))
                         @ r
                         eta1
                         eta2)
                        `cast`
                      (<FreeGame.Data.Font.Font>_R
                       ->_R Trans
                                (Sym (Control.Monad.Free.Church.N:F[0]
                                          <FreeGame.UI.UI>_R
                                          <Data.Either.Either
                                             ()
                                             (Control.Monad.Trans.Iter.IterT
                                                (Control.Monad.Free.Church.F FreeGame.UI.UI)
                                                ())>_R))
                                (Sym (Control.Monad.Trans.Iter.N:IterT[0]
                                          <Control.Monad.Free.Church.F FreeGame.UI.UI>_N <()>_N))))
                   ipv } } }) -}
90aa85cedb44c5f0bd82bc9c3cdfb5ac
  main10 :: [GHC.IO.FilePath]
  {- Unfolding: (Main.main13 Main.main18 Main.main11) -}
016cc529e4ed76ef9c416fbb54467b5f
  main11 :: [GHC.IO.FilePath]
  {- Unfolding: (Main.main13
                   Main.main12
                   (GHC.Types.[] @ GHC.IO.FilePath)) -}
c87e4a100a9db76199299278fe91a0db
  main12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "s"#) -}
60d9d17adb66fd9d0ee9d0024b25927b
  main13 ::
    [GHC.Types.Char] -> [GHC.IO.FilePath] -> [GHC.IO.FilePath]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ (ds :: [GHC.Types.Char])
                   (ds1 :: [GHC.IO.FilePath])[OneShot] ->
                 letrec {
                   go :: [GHC.Integer.Type.Integer] -> [GHC.IO.FilePath]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds2 :: [GHC.Integer.Type.Integer]) ->
                     case ds2 of wild {
                       [] -> ds1
                       : y ys
                       -> GHC.Types.:
                            @ GHC.IO.FilePath
                            (GHC.CString.unpackAppendCString#
                               "asset/cards/"#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  ds
                                  (case GHC.Show.$w$cshowsPrec3
                                          0#
                                          y
                                          (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                                   let {
                                     s :: GHC.Base.String = GHC.Types.: @ GHC.Types.Char ww3 ww4
                                   } in
                                   case GHC.List.$wlenAcc @ GHC.Types.Char s 0# of ww1 {
                                     DEFAULT -> GHC.Base.++ @ GHC.Types.Char s Main.main17
                                     1#
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          (GHC.Types.: @ GHC.Types.Char Main.add0str1 s)
                                          Main.main17 } })))
                            (go ys) }
                 } in
                 go Main.main14) -}
94c6dd819a1f15e024f2a3e03cf3a456
  main14 :: [GHC.Integer.Type.Integer]
  {- Unfolding: (GHC.Enum.enumDeltaToInteger1
                   Main.main16
                   Main.main15) -}
2dfa0541fb7aa0ab2b5c277d116220f4
  main15 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (13) -}
b09ae16fc1a90cf1b4abd5dcae92f72b
  main16 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
f66ae55778431fa9afa5648dcb7dfbea
  main17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ".png"#) -}
86ad5d1c79aa8b1ab973f026df2aebd8
  main18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "h"#) -}
5a427cf90b11aaf7066d0fd2c177b91d
  main19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "d"#) -}
5cc28d10e7bb6c35c44c49d6d28858b0
  main2 ::
    Control.Monad.Trans.Iter.IterT
      FreeGame.UI.Frame FreeGame.Data.Bitmap.Bitmap
  {- Unfolding: (FreeGame.Data.Bitmap.readBitmap
                   @ (Control.Monad.Trans.Iter.IterT FreeGame.UI.Frame)
                   Main.$s$fMonadIOIterT
                   Main.main3) -}
1e4daacbe465484b76c992c2691dcde6
  main20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "c"#) -}
c393e7fa55988545a6b308aadef7dd91
  main21 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ (GHC.Base.Maybe ())
                   Main.main1
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe ()>_R))) -}
3e4f00eae14964ce4033cc663c5887de
  main3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "asset/back.png"#) -}
bdd9314028f2b423d7346c671198c6db
  main4 ::
    Control.Monad.Trans.Iter.IterT
      FreeGame.UI.Frame FreeGame.Data.Font.Font
  {- Unfolding: (FreeGame.Data.Font.loadFontFromFile
                   @ (Control.Monad.Trans.Iter.IterT FreeGame.UI.Frame)
                   Main.$s$fMonadIOIterT
                   Main.main5) -}
38b7e34ba17e23eb172cd66841137d14
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "asset/VL-PGothic-Regular.ttf"#) -}
6eb8b1d010496f1486fd276601aca7f7
  main6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
197f1b873176cd06942e4809561f88a0
  main7 ::
    Control.Monad.Trans.Iter.IterT
      FreeGame.UI.Frame [FreeGame.Data.Bitmap.Bitmap]
  {- Unfolding: (Main.main_go Main.main8) -}
623dacb9d66bffad3dc5b8037b67d7e6
  main8 :: [GHC.IO.FilePath]
  {- Unfolding: (Main.main13 Main.main20 Main.main9) -}
fb22428e86156c3f400061bd69d9203a
  main9 :: [GHC.IO.FilePath]
  {- Unfolding: (Main.main13 Main.main19 Main.main10) -}
143441f123e733d36f0b32b79649cfac
  main_go ::
    [GHC.IO.FilePath]
    -> Control.Monad.Trans.Iter.IterT
         FreeGame.UI.Frame [FreeGame.Data.Bitmap.Bitmap]
  {- Arity: 1, Strictness: <S,1*U> -}
31644449ff001fddad7cfe4fa11d181c
  update ::
    FreeGame.Data.Font.Font
    -> [Cards.Card]
    -> [FreeGame.Data.Bitmap.Bitmap]
    -> Data.Map.Base.Map Cards.Card FreeGame.Data.Bitmap.Bitmap
    -> FreeGame.Data.Bitmap.Bitmap
    -> FreeGame.UI.Game ()
  {- Arity: 5, Strictness: <L,A><L,U><L,A><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ (w :: FreeGame.Data.Font.Font)
                   (w1 :: [Cards.Card])
                   (w2 :: [FreeGame.Data.Bitmap.Bitmap])
                   (w3 :: Data.Map.Base.Map Cards.Card FreeGame.Data.Bitmap.Bitmap)
                   (w4 :: FreeGame.Data.Bitmap.Bitmap) ->
                 Main.$wupdate w1 w3 w4) -}
"SPEC/Main $fAlternativeIterT_$c>>= @ (F UI)" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                            (Control.Monad.Free.Church.F
                                                                               FreeGame.UI.UI))
  Control.Monad.Trans.Iter.$fAlternativeIterT_$c>>= @ (Control.Monad.Free.Church.F
                                                         FreeGame.UI.UI)
                                                    $dMonad
  = Main.$s$fAlternativeIterT_$c>>=
"SPEC/Main $fMonadFreeIdentityIterT @ (F UI)" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                            (Control.Monad.Free.Church.F
                                                                               FreeGame.UI.UI))
  Control.Monad.Trans.Iter.$fMonadFreeIdentityIterT @ (Control.Monad.Free.Church.F
                                                         FreeGame.UI.UI)
                                                    $dMonad
  = Main.$s$fMonadFreeIdentityIterT
"SPEC/Main $fMonadIOIterT @ (F UI)" [ALWAYS] forall ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                    (Control.Monad.Free.Church.F
                                                                       FreeGame.UI.UI))
  Control.Monad.Trans.Iter.$fMonadIOIterT @ (Control.Monad.Free.Church.F
                                               FreeGame.UI.UI)
                                          $dMonadIO
  = Main.$s$fMonadIOIterT
"SPEC/Main $fMonadIOIterT_$cp1MonadIO @ (F UI)" [ALWAYS] forall ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                (Control.Monad.Free.Church.F
                                                                                   FreeGame.UI.UI))
  Control.Monad.Trans.Iter.$fMonadIOIterT_$cp1MonadIO @ (Control.Monad.Free.Church.F
                                                           FreeGame.UI.UI)
                                                      $dMonadIO
  = Main.$s$fMonadIOIterT_$s$fMonadIOIterT_$cp1MonadIO
"SPEC/Main $fMonadIterT @ (F UI)" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                (Control.Monad.Free.Church.F
                                                                   FreeGame.UI.UI))
  Control.Monad.Trans.Iter.$fMonadIterT @ (Control.Monad.Free.Church.F
                                             FreeGame.UI.UI)
                                        $dMonad
  = Main.$s$fMonadIOIterT_$s$fMonadIterT
"SPEC/Main $fMonadIterT_$c>> @ (F UI)" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                     (Control.Monad.Free.Church.F
                                                                        FreeGame.UI.UI))
  Control.Monad.Trans.Iter.$fMonadIterT_$c>> @ (Control.Monad.Free.Church.F
                                                  FreeGame.UI.UI)
                                             $dMonad
  = Main.$s$fMonadIOIterT_$s$fMonadIterT_$c>>
"SPEC/Main $fMonadIterT_$cfail @ (F UI)" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                       (Control.Monad.Free.Church.F
                                                                          FreeGame.UI.UI))
  Control.Monad.Trans.Iter.$fMonadIterT_$cfail @ (Control.Monad.Free.Church.F
                                                    FreeGame.UI.UI)
                                               $dMonad
  = Main.$s$fMonadIOIterT_$s$fMonadIterT_$cfail
"SPEC/Main fromList @ Card _" [ALWAYS] forall @ a
                                              ($dOrd :: GHC.Classes.Ord Cards.Card)
  Data.Map.Base.fromList @ Cards.Card @ a $dOrd = Main.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

